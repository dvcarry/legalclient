{"version":3,"file":"static/js/76.e32180ba.chunk.js","mappings":"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","sources":["entities/template/types.ts","pages/documentEditing/api-templates.ts","pages/documentEditing/index.tsx","shared/config/api.ts"],"sourcesContent":["export enum TemplateItemTypeEnum {\r\n    paragraph = 'paragraph',\r\n    array = 'array',\r\n    single = 'single',\r\n}\r\n\r\nexport enum TemplateTextTypeEnum {\r\n    text = 'text',\r\n    variable = 'variable',\r\n}\r\n\r\nexport interface ITemplateItem {\r\n    type: TemplateItemTypeEnum\r\n    value: IParagraph[],\r\n    styles: any;\r\n}\r\n\r\ninterface IParagraph {\r\n    id?: string,\r\n    type: string,\r\n    value: ITextItem[],\r\n    styles?: any\r\n}\r\n\r\ninterface ITextItem {\r\n    id?: string,\r\n    type: string,\r\n    value: string,\r\n    styles?: any\r\n}","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_TEMPLATES = {\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/templates/\" + type);\r\n    return response;\r\n  },\r\n  async change(document_type: string, template: any) {\r\n    const { data: response } = await api.post<any>(\"/templates/\", {\r\n      document_type,\r\n      template,\r\n    });\r\n    return response;\r\n  },\r\n};\r\n","import { FocusEventHandler, useEffect, useState } from \"react\";\r\nimport {\r\n  ITemplateItem,\r\n  TemplateItemTypeEnum,\r\n  TemplateTextTypeEnum,\r\n} from \"entities/template/types\";\r\nimport { API_TEMPLATES } from \"./api-templates\";\r\nimport \"./index.scss\";\r\nimport { Button } from \"antd\";\r\nimport { STYLE_CONFIG } from \"./styleconfig\";\r\n\r\nconst createCSSFromStyles = (styles: any) => {\r\n  // console.log(\"üöÄ ~ file: index.tsx ~ line 12 ~ createCSSFromStyles ~ styles\", styles)\r\n  let result = {};\r\n  styles &&\r\n    Object.keys(styles).length > 0 &&\r\n    Object.keys(styles).forEach((item) => {\r\n      if (item === \"alignment\") {\r\n        result = {\r\n          ...result,\r\n          textAlign: styles.alignment === \"both\" ? \"justify\" : styles.alignment,\r\n        };\r\n      }\r\n      if (item === \"indent\") {\r\n        result = {\r\n          ...result,\r\n          textIndent: 30,\r\n        };\r\n      }\r\n      if (item === \"bold\") {\r\n        result = {\r\n          ...result,\r\n          fontWeight: \"bold\",\r\n        };\r\n      }\r\n      if (item === \"break\") {\r\n        result = {\r\n          ...result,\r\n          display: \"block\",\r\n        };\r\n      }\r\n    });\r\n\r\n  return result;\r\n};\r\n\r\nconst DocumentEditingPage = () => {\r\n  const [template, setTemplate] = useState<ITemplateItem[]>([]);\r\n  const [currentDiv, setCurrentDiv] = useState<any>(null);\r\n  const [currentSpan, setCurrentSpan] = useState<any>(null);\r\n  console.log(\"üöÄ ~ file: index.tsx ~ line 51 ~ DocumentEditingPage ~ currentSpan\", currentSpan)\r\n\r\n  const getTemplate = async () => {\r\n    const newTemplate = await API_TEMPLATES.get(\"notification\");\r\n    setTemplate(newTemplate);\r\n  };\r\n\r\n  const clickHandler = (e: any) => {\r\n    console.log(\r\n      \"üöÄ ~ file: index.tsx ~ line 47 ~ clickHandler ~ e\",\r\n      e.target.parentElement\r\n    );\r\n    setCurrentDiv(e.target.parentNode.style);\r\n    setCurrentSpan(e.target.style)\r\n  };\r\n\r\n  const changeSomeInTemplate = (\r\n    id: string,\r\n    type: \"value\" | \"styles\",\r\n    value: any\r\n  ) => {\r\n    const newTemplate = template.map((item) => {\r\n      if (item.value.some((itemValue) => itemValue.id === id)) {\r\n        return {\r\n          ...item,\r\n          value: item.value.map((itemValue) =>\r\n            itemValue.id === id ? { ...itemValue, [type]: value } : itemValue\r\n          ),\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setTemplate(newTemplate);\r\n  };\r\n\r\n  const utils = {\r\n    addEnter() {\r\n      // changeSomeInTemplate(currentBlock, \"styles\", {\r\n      //   break: 1,\r\n      // });\r\n    },\r\n    makeBold() {\r\n      // changeSomeInTemplate(currentBlock, \"styles\", {\r\n      //   bold: true,\r\n      // });\r\n    },\r\n  };\r\n\r\n  const changeHandler = (e: any) => {\r\n    // const newTemplate = template.map((item) => {\r\n    //   if (item.value.some((itemValue) => itemValue.id === e.target.id)) {\r\n    //     const objectOfChanges =\r\n    //       e.nativeEvent.inputType === \"insertParagraph\"\r\n    //         ? { styles: { break: 1 } }\r\n    //         : { value: e.target.innerText };\r\n\r\n    //     return {\r\n    //       ...item,\r\n    //       value: item.value.map((itemValue) =>\r\n    //         itemValue.id === e.target.id\r\n    //           ? { ...itemValue, value: e.target.innerText }\r\n    //           : itemValue\r\n    //       ),\r\n    //     };\r\n    //   } else {\r\n    //     return item;\r\n    //   }\r\n    // });\r\n    // setTemplate(newTemplate);\r\n    const a = Array.from(e.target.childNodes).map((item: any) => ({\r\n      value: item.innerText,\r\n      style: item.attributes.style && item.attributes.style.nodeValue,\r\n    }));\r\n    console.log(\r\n      \"üöÄ ~ file: index.tsx ~ line 106 ~ changeHandler ~ e\",\r\n\r\n      e.target,\r\n      a\r\n    );\r\n  };\r\n\r\n  const saveHandler = () => {\r\n    API_TEMPLATES.change(\"notification\", JSON.stringify(template));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTemplate();\r\n  }, []);\r\n\r\n  if (template.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"template_styles\">\r\n        <span className=\"template_styles_item\">\r\n          <span>–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: </span>\r\n          <span>{currentDiv && currentDiv.textAlign}</span>\r\n          {/* <span>{currentDiv && STYLE_CONFIG.ALIGN[currentDiv.textAlign]}</span> */}\r\n        </span>\r\n        <span className=\"template_styles_item\">\r\n          <span>–ö—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: </span>\r\n          <span>{currentDiv && currentDiv.textIndent ? \"–î–∞\" : \"–ù–µ—Ç\"}</span>\r\n        </span>\r\n        <span className=\"template_styles_item\">\r\n          <span>–ñ–∏—Ä–Ω–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: </span>\r\n          <span>{currentSpan && currentSpan.fontWeight}</span>\r\n        </span>\r\n      </div>\r\n      <div\r\n        className=\"template_list\"\r\n        contentEditable\r\n        onBlur={changeHandler}\r\n        suppressContentEditableWarning={true}\r\n      >\r\n        {template.map((item, index) => {\r\n          if (item.type === TemplateItemTypeEnum.single) {\r\n            return item.value.map((paragraph) => {\r\n              const { styles } = paragraph;\r\n              const cssStyles = createCSSFromStyles(styles);\r\n\r\n              return (\r\n                <div style={cssStyles} onClick={clickHandler}>\r\n                  {paragraph.value.map((text: any) => {\r\n                    if (text.type === TemplateTextTypeEnum.variable) {\r\n                      return (\r\n                        <span\r\n                          className={text.type}\r\n                          style={createCSSFromStyles(text.styles)}\r\n                          contentEditable={false}\r\n                        >\r\n                          {text.value}\r\n                        </span>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <span\r\n                          className={text.type}\r\n                          style={createCSSFromStyles(text.styles)}\r\n                        >\r\n                          {text.value}\r\n                        </span>\r\n                      );\r\n                    }\r\n                  })}\r\n                </div>\r\n              );\r\n            });\r\n\r\n            // const { styles } = item;\r\n\r\n            // const cssStyles = createCSSFromStyles(styles);\r\n\r\n            // return (\r\n            //   <div style={cssStyles} key={index}>\r\n            //     {item.value.map((itemValue) => {\r\n            //       const textCssStyles = createCSSFromStyles(itemValue.styles);\r\n            //       return (\r\n            //         <span\r\n            //           id={itemValue.id}\r\n            //           key={itemValue.id}\r\n            //           className={itemValue.type}\r\n            //           style={textCssStyles}\r\n            //           // contentEditable\r\n            //           // onInput={changeHandler}\r\n            //           // onBlur={changeHandler}\r\n            //           // onClick={clickHandler}\r\n            //           suppressContentEditableWarning={true}\r\n            //         >\r\n            //           {itemValue.value}\r\n            //         </span>\r\n            //       );\r\n            //     })}\r\n            //   </div>\r\n            // );\r\n          }\r\n        })}\r\n        {/* {template.map((item, index) => {\r\n        if (item.type === TemplateItemTypeEnum.paragraph) {\r\n          const { styles } = item;\r\n\r\n          const cssStyles = createCSSFromStyles(styles);\r\n\r\n          return (\r\n            <div style={cssStyles} key={index}>\r\n              {item.value.map((itemValue) => {\r\n                const textCssStyles = createCSSFromStyles(itemValue.styles);\r\n                return (\r\n                  <span\r\n                    id={itemValue.id}\r\n                    key={itemValue.id}\r\n                    className={itemValue.type}\r\n                    style={textCssStyles}\r\n                    // contentEditable\r\n                    // onInput={changeHandler}\r\n                    // onBlur={changeHandler}\r\n                    // onClick={clickHandler}\r\n                    suppressContentEditableWarning={true}\r\n                  >\r\n                    {itemValue.value}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        }\r\n      })} */}\r\n      </div>\r\n      <div>\r\n        <Button onClick={saveHandler}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>\r\n        {/* <span onClick={utils.addEnter}>–î–æ–±–∞–≤–∏—Ç—å –∞–±–∑–∞—Ü —Å–≤–µ—Ä—Ö—É</span>\r\n        <span onClick={utils.makeBold}>–°–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º</span> */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DocumentEditingPage;\r\n","import axios from \"axios\";\r\n\r\n// export const baseURL = \"http://localhost:5022/api\"\r\nexport const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["TemplateItemTypeEnum","TemplateTextTypeEnum","API_TEMPLATES","type","api","response","data","document_type","template","createCSSFromStyles","styles","result","Object","keys","length","forEach","item","textAlign","alignment","textIndent","fontWeight","display","useState","setTemplate","currentDiv","setCurrentDiv","currentSpan","setCurrentSpan","console","log","getTemplate","newTemplate","clickHandler","e","target","parentElement","parentNode","style","useEffect","className","contentEditable","onBlur","a","Array","from","childNodes","map","value","innerText","attributes","nodeValue","suppressContentEditableWarning","index","single","paragraph","cssStyles","onClick","text","variable","JSON","stringify","baseURL","axios","headers"],"sourceRoot":""}