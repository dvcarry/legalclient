{"version":3,"file":"static/js/18.a6bc1323.chunk.js","mappings":"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","sources":["entities/meeting/types.ts","entities/member/types.ts","pages/companies/api-companies.ts","pages/companyDetails/api-company.ts","pages/meetingDetails/api-meeting.ts","pages/meetingDetails/blocks/questionsBlock/api-questions.ts","pages/meetingDetails/blocks/answersBlock/api-answers.ts","shared/api/api-catalogs.ts","entities/store/index.ts","features/dates.ts","pages/companyDetails/blocks/requisites/index.tsx","entities/member/MemberForm.tsx","pages/companyDetails/blocks/members/index.tsx","entities/meeting/form.tsx","pages/companyDetails/blocks/meetings/index.tsx","pages/companyDetails/index.tsx","shared/config/api.ts"],"sourcesContent":["import { IAnswer } from \"entities/answer/types\";\r\nimport { Moment } from \"moment\";\r\n\r\nexport interface IQuestion {\r\n  id: number;\r\n  index: number;\r\n  name: string;\r\n  solution: string;\r\n  description: string;\r\n}\r\n\r\nexport interface IMeeting {\r\n  id: string;\r\n  name: string;\r\n  info: {\r\n    name: string;\r\n    date_of_meeting?: Moment;\r\n    date_of_registration?: Moment;\r\n    address_of_meeting?: string;\r\n    type?: MeetingTypeEnum;\r\n    type_of_cause?: MeetingTypeOfСauseEnum;\r\n  };\r\n  questions: IQuestion[];\r\n  // dateOfMeeting?: Date;\r\n  // addressOfMeeting?: string;\r\n  // type?: MeetingTypeEnum;\r\n  // typeOfСause?: MeetingTypeOfСauseEnum;\r\n  answers: IAnswer[];\r\n}\r\n\r\nexport enum MeetingTypeOfСauseEnum {\r\n  year = \"year\",\r\n  extra = \"extra\",\r\n}\r\n\r\nexport const MEETING_TYPES_OF_CAUSE: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeOfСauseEnum.year]: \"годовое\",\r\n  [MeetingTypeOfСauseEnum.extra]: \"внеочередное\",\r\n};\r\n\r\nexport enum MeetingTypeEnum {\r\n  ochno = \"ochno\",\r\n  zaochno = \"zaochno\",\r\n  ochnozaochno = \"ochnozaochno\",\r\n}\r\n\r\nexport const MEETING_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeEnum.ochno]: \"очное\",\r\n  [MeetingTypeEnum.zaochno]: \"заочное\",\r\n  [MeetingTypeEnum.ochnozaochno]: \"очно-заочное\",\r\n};\r\n","export interface IMember {\r\n  id?: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  sirname: string;\r\n  passport: string;\r\n  type: MemberTypeEnum[];\r\n  part?: number;\r\n}\r\n\r\nexport enum MemberTypeEnum {\r\n  owner = \"owner\",\r\n  director = \"director\",\r\n  employee = \"employee\",\r\n}\r\n\r\nexport const MEMBER_TYPES = [\r\n  {\r\n    en: MemberTypeEnum.director,\r\n    ru: \"директор\",\r\n  },\r\n  {\r\n    en: MemberTypeEnum.owner,\r\n    ru: \"собственник\",\r\n  },\r\n];\r\n\r\nexport const MEMBERS_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberTypeEnum.director]: \"директор\",\r\n  [MemberTypeEnum.owner]: \"собственник\",\r\n  [MemberTypeEnum.employee]: \"сотрудник\",\r\n};\r\n","import { ICompany } from \"entities/company/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANIES = {\r\n  async getAll() {\r\n    const { data: response } = await api.get<ICompany[]>(\"/companies\");\r\n    return response;\r\n  },\r\n  async add(data: ICompany) {\r\n    const { data: response } = await api.post<ICompany>(\"/companies\", data);\r\n    return response;\r\n  },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANY = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<ICompanyFull>(\"/companies/\" + id);\r\n    return response;\r\n  },\r\n  async addMember(data: IMember) {\r\n    const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n    return response;\r\n  },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_MEETING = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n    return response;\r\n  },\r\n  async add(company_id: string, name: string) {\r\n    const { data: response } = await api.post<IMeeting>(\"/meetings/\", {\r\n      company_id,\r\n      name,\r\n    });\r\n    return response;\r\n  },\r\n  async changeInfo(data: IMeeting) {\r\n    const { data: response } = await api.put<any>(\"/meetings/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_QUESTIONS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IQuestion) {\r\n    const { data: response } = await api.post<IQuestion>(\"/questions/\", data);\r\n    return response;\r\n  },\r\n  async getQuestionTypes() {\r\n    const { data: response } = await api.get<any>(\"/catalogs/question_type\");\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_ANSWERS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IAnswer[]) {\r\n    const { data: response } = await api.post<any>(\"/answers/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_CATALOGS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/catalogs/\" + type);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import create from \"zustand\";\r\nimport moment from \"moment\";\r\n\r\nimport { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { API_COMPANIES } from \"pages/companies/api-companies\";\r\nimport { API_COMPANY } from \"pages/companyDetails/api-company\";\r\nimport { API_MEETING } from \"pages/meetingDetails/api-meeting\";\r\nimport { API_QUESTIONS } from \"pages/meetingDetails/blocks/questionsBlock/api-questions\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { API_ANSWERS } from \"pages/meetingDetails/blocks/answersBlock/api-answers\";\r\nimport { dateWithTimeGetFormat } from \"features/dates\";\r\nimport { API_CATALOGS } from \"shared/api/api-catalogs\";\r\n\r\ninterface CompanyState {\r\n  companies: ICompany[];\r\n  getCompanies: () => void;\r\n  addCompany: (newCompany: ICompany) => void;\r\n  company: ICompanyFull;\r\n  getCompany: (id: string) => void;\r\n  addMember: (data: IMember) => void;\r\n  meeting: IMeeting;\r\n  getMeeting: (id: string) => void;\r\n  addMeeting: (company_id: string, name: string) => void;\r\n  changeMeetingInfo: (meetingInfo: any) => void;\r\n  addQuesion: (data: IQuestion) => void;\r\n  addAnswer: (data: IAnswer[]) => void;\r\n  catalogs: any;\r\n  getGatalog: (type: string) => void;\r\n}\r\n\r\nexport const useStore = create<CompanyState>()((set) => ({\r\n  companies: [],\r\n  company: {\r\n    id: \"\",\r\n    requisites: { name: \"\", inn: \"\", kpp: \"\", address: \"\" },\r\n    members: [],\r\n    meetings: [],\r\n  },\r\n  getCompanies: async () => {\r\n    const response = await API_COMPANIES.getAll();\r\n    set({ companies: response });\r\n  },\r\n  addCompany: async (newCompany) => {\r\n    const response = await API_COMPANIES.add(newCompany);\r\n    set((state) => ({ companies: [...state.companies, response] }));\r\n  },\r\n  getCompany: async (id: string) => {\r\n    const response = await API_COMPANY.get(id);\r\n    set({ company: response });\r\n  },\r\n  addMember: async (data: IMember) => {\r\n    const response = await API_COMPANY.addMember(data);\r\n    set((state) => ({\r\n      company: { ...state.company, members: [...state.company.members, data] },\r\n    }));\r\n    // set((state) => ({ company: {...state.company, members: [...state.company?.members, response]} }));\r\n  },\r\n  meeting: {\r\n    id: \"\",\r\n    name: \"\",\r\n    info: { name: \"\" },\r\n    // typeOfСause: '',\r\n    questions: [],\r\n    answers: [],\r\n  },\r\n  getMeeting: async (id: string) => {\r\n    const response = await API_MEETING.get(id);\r\n    set({\r\n      meeting: {\r\n        ...response,\r\n        info: {\r\n          ...response.info,\r\n          date_of_meeting:\r\n            response.info.date_of_meeting &&\r\n            moment(response.info.date_of_meeting, dateWithTimeGetFormat),\r\n          date_of_registration:\r\n            response.info.date_of_registration &&\r\n            moment(response.info.date_of_registration, dateWithTimeGetFormat),\r\n        },\r\n      },\r\n    });\r\n    // set({ meeting: response});\r\n  },\r\n  addMeeting: async (company_id: string, name: string) => {\r\n    const response = await API_MEETING.add(company_id, name);\r\n    set((state) => ({\r\n      company: {\r\n        ...state.company,\r\n        meetings: [...state.company.meetings, response],\r\n      },\r\n    }));\r\n  },\r\n  changeMeetingInfo: async (meetingInfo: any) => {\r\n    const response = await API_MEETING.changeInfo(meetingInfo);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        info: { ...state.meeting.info, meetingInfo },\r\n      },\r\n    }));\r\n  },\r\n  addQuesion: async (data: IQuestion) => {\r\n    const response = await API_QUESTIONS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        questions: [...state.meeting.questions, response],\r\n      },\r\n    }));\r\n  },\r\n  addAnswer: async (data: IAnswer[]) => {\r\n    const response = await API_ANSWERS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        answers: [...state.meeting.answers, ...response],\r\n      },\r\n    }));\r\n  },\r\n  catalogs: {},\r\n  getGatalog: async (type: string) => {\r\n    const response = await API_CATALOGS.get(type);\r\n    set((state) => ({\r\n      catalogs: {\r\n        ...state.catalogs,\r\n        [type]: response,\r\n      },\r\n    }));\r\n  },\r\n}));\r\n","export const dateWithTimeGetFormat = 'YYYY-MM-DDTHH:mm';\r\nexport const dateWithTimeShowFormat = 'DD.MM.YYYY HH:mm';","import { Button, Form, Input } from \"antd\";\r\nimport { ICompanyRequisites } from \"entities/company/types\";\r\nimport { FC, useState } from \"react\";\r\n\r\n\r\n\r\ninterface IPropc {\r\n  requisites: ICompanyRequisites;\r\n}\r\n\r\nexport const RequisitiesBlock: FC<IPropc> = ({ requisites }) => {\r\nconsole.log(\"🚀 ~ file: index.tsx ~ line 21 ~ requisites\", requisites)\r\n  const [isActiveForm, setIsActiveForm] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  const activeHandler = () => {\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  if (!requisites.inn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        disabled={isActiveForm}\r\n        layout=\"vertical\"\r\n        initialValues={requisites}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Название\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"inn\"\r\n          label=\"ИНН\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"kpp\"\r\n          label=\"КПП\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"ogrn\"\r\n          label=\"ОГРН\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"address\"\r\n          label=\"Юридический адрес\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n      </Form>\r\n      {isActiveForm ? (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Изменить\r\n        </Button>\r\n      ) : (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Сохранить\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, InputNumber, Modal, Select } from \"antd\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { IMember, MEMBER_TYPES, MemberTypeEnum } from \"./types\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(({ member }: { member: IMember }) => {\r\n  const [isOwner, setIsOwner] = useState(false);\r\n\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n  // const meta = {\r\n  //   initialValues: user,\r\n  //   fields: [\r\n  //     { key: 'name', label: 'Name', required: true },\r\n  //     { key: 'job', label: 'Job Title', required: true },\r\n  //   ],\r\n  // };\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newMember = { ...form.getFieldsValue() };\r\n      modal.resolve(newMember);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n\r\n  const handleChangeMemberType = (values: any[]) => {\r\n    if (values.includes(MemberTypeEnum.owner)) {\r\n      setIsOwner(true);\r\n    } else {\r\n      setIsOwner(false);\r\n    }\r\n  };\r\n\r\n  // const a = form.getFieldValue('type')\r\n\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Лицо\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      onOk={handleSubmit}\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n    >\r\n      <Form form={form} initialValues={member} layout=\"vertical\">\r\n        <Form.Item\r\n          name=\"firstname\"\r\n          label=\"Имя\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"lastname\"\r\n          label=\"Отчество\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"sirname\"\r\n          label=\"Фамилия\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"passport\"\r\n          label=\"Паспортные данные\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type\"\r\n          label=\"Роль участника\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            mode=\"multiple\"\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            // placeholder=\"Please select\"\r\n            // defaultValue={[\"a10\", \"c12\"]}\r\n            onChange={handleChangeMemberType}\r\n          >\r\n            {MEMBER_TYPES.map((member_type) => (\r\n              <Option key={member_type.en}>{member_type.ru}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        {isOwner && (\r\n          <Form.Item\r\n            name=\"part\"\r\n            label=\"Доля в компании, %\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input the title of collection!\",\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber min={0} max={100} />\r\n          </Form.Item>\r\n        )}\r\n      </Form>\r\n    </Modal>\r\n  );\r\n});\r\n","import { useModal } from \"@ebay/nice-modal-react\";\r\nimport { Alert, Button, Card, Tag } from \"antd\";\r\nimport MemberForm from \"entities/member/MemberForm\";\r\nimport { IMember, MEMBERS_TYPES } from \"entities/member/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { FC, useCallback } from \"react\";\r\n\r\ninterface IProps {\r\n  members: IMember[];\r\n  company_id: string;\r\n}\r\n\r\nexport const MembersBlock: FC<IProps> = ({ members, company_id }) => {\r\n  const userModal = useModal(MemberForm);\r\n  const { addMember } = useStore((state) => state);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newMember: any) => {\r\n      addMember({ ...newMember, company_id });\r\n    });\r\n  }, [userModal, members]);\r\n\r\n  const handleChangeItem = useCallback(\r\n    (member: any) => {\r\n      userModal.show({ member }).then((newMember: any) => {\r\n        // addMember({ ...newMember, company_id });\r\n      });\r\n    },\r\n    [userModal, members]\r\n  );\r\n\r\n  const commonPart = members.reduce((acc, cur) => acc + +cur.part!, 0);\r\n\r\n  // if (commonPart !== 100) {\r\n  //   return (\r\n  //     <Alert\r\n  //       message=\"Общая доля участников не равна 100%. Проверьте доли участников компании.\"\r\n  //       type=\"warning\"\r\n  //       // closable\r\n  //       // onClose={onClose}\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить участника\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {commonPart !== 100 && (\r\n          <Alert\r\n            message=\"Общая доля участников не равна 100%. Проверьте доли участников компании.\"\r\n            type=\"warning\"\r\n            // closable\r\n            // onClose={onClose}\r\n          />\r\n        )}\r\n        {members.map((member) => {\r\n          return (\r\n            <Card\r\n              hoverable\r\n              title={`${member.sirname} ${member.firstname} ${member.lastname}`}\r\n              key={member.id}\r\n              onClick={() => handleChangeItem(member)}\r\n            >\r\n              <div>\r\n                {member.type.map((item, index) => (\r\n                  <Tag key={index} color=\"green\">\r\n                    {MEMBERS_TYPES[item]}\r\n                  </Tag>\r\n                ))}\r\n              </div>\r\n              <div>Паспорт: {member.passport}</div>\r\n              {member.part && <div>Доля в компании: {member.part}%</div>}\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { IMeeting } from \"./types\";\r\n\r\nexport default NiceModal.create((\r\n  {meeting}: {meeting: IMeeting}\r\n  ) => {\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newCompany = { ...form.getFieldsValue() };\r\n      modal.resolve(newCompany);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Создать собрание\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n      onOk={handleSubmit}    \r\n    >\r\n      <Form form={form} layout='vertical'>\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Условное название собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>        \r\n      </Form>\r\n    </Modal>\r\n  );\r\n});","import { useModal } from \"@ebay/nice-modal-react\";\r\nimport { Button, Card } from \"antd\";\r\nimport MeetingForm from \"entities/meeting/form\";\r\nimport { IMeeting, MEETING_TYPES, MEETING_TYPES_OF_CAUSE } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport moment from \"moment\";\r\nimport { FC, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n  meetings: any[];\r\n  company_id: string;\r\n}\r\n\r\nexport const MeetingsBlock: FC<IProps> = ({ meetings, company_id }) => {\r\n  const userModal = useModal(MeetingForm);\r\n  const { addMeeting } = useStore((state) => state);\r\n\r\n  const history = useNavigate();\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newItem: any) => {\r\n      addMeeting(company_id, newItem.name!);\r\n    });\r\n  }, [userModal, meetings]);\r\n\r\n  const clickHandler = (id: string) => {\r\n    // setCurrentMeeting(id);\r\n    history(\"/meetings/\" + id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить собрание\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {meetings.map((meeting) => {\r\n          return (\r\n            <Card\r\n              hoverable\r\n              key={meeting.id}\r\n              title={meeting.name}\r\n              onClick={() => clickHandler(meeting.id)}\r\n            >\r\n              <div>{moment(meeting.date_of_meeting).format('DD.MM.YYYY')}</div>\r\n              <div>{MEETING_TYPES_OF_CAUSE[meeting.type_of_cause]}</div>\r\n              <div>{MEETING_TYPES[meeting.type]}</div>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Breadcrumb, PageHeader, Tabs } from \"antd\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { RequisitiesBlock } from \"./blocks/requisites\";\r\nimport { useStore } from \"entities/store\";\r\nimport { MembersBlock } from \"./blocks/members\";\r\nimport { MeetingsBlock } from \"./blocks/meetings\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst CompaniesDetailsPage: FC = () => {\r\n  const { id } = useParams();\r\n\r\n  const { company, getCompany } = useStore((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getCompany(id);\r\n    }\r\n  }, [id]);\r\n\r\n  if (!company) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>\r\n          <a href=\"/\">Главная</a>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <a href=\"/companies\">Компании</a>\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"header\">\r\n        <h1>{\"ООО \" + company.requisites.name}</h1>\r\n      </div>\r\n      <Tabs\r\n        defaultActiveKey=\"1\"\r\n        //   onChange={onChange}\r\n      >\r\n        <TabPane tab=\"Реквизиты\" key=\"1\">\r\n          <RequisitiesBlock requisites={company.requisites} />\r\n        </TabPane>\r\n        <TabPane tab=\"Лица\" key=\"2\">\r\n          <MembersBlock members={company.members} company_id={company.id} />\r\n        </TabPane>\r\n        <TabPane tab=\"Собрания\" key=\"3\">\r\n          <MeetingsBlock meetings={company.meetings} company_id={company.id} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompaniesDetailsPage;\r\n","import axios from \"axios\";\r\n\r\n// export const baseURL = \"http://localhost:5022/api\"\r\nexport const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["MeetingTypeOfСauseEnum","MeetingTypeEnum","MEETING_TYPES_OF_CAUSE","year","extra","MEETING_TYPES","ochno","zaochno","ochnozaochno","MemberTypeEnum","MEMBER_TYPES","en","director","ru","owner","MEMBERS_TYPES","employee","API_COMPANIES","api","response","data","API_COMPANY","id","API_MEETING","company_id","name","API_QUESTIONS","API_ANSWERS","API_CATALOGS","type","useStore","create","set","companies","company","requisites","inn","kpp","address","members","meetings","getCompanies","addCompany","newCompany","state","getCompany","addMember","meeting","info","questions","answers","getMeeting","date_of_meeting","moment","dateWithTimeGetFormat","date_of_registration","addMeeting","changeMeetingInfo","meetingInfo","addQuesion","addAnswer","catalogs","getGatalog","dateWithTimeShowFormat","RequisitiesBlock","console","log","useState","isActiveForm","setIsActiveForm","Form","form","activeHandler","disabled","layout","initialValues","label","rules","required","message","onClick","Option","Select","NiceModal","member","isOwner","setIsOwner","modal","useModal","handleSubmit","useCallback","validateFields","then","newMember","getFieldsValue","resolve","hide","antdModal","title","onOk","okText","cancelText","mode","allowClear","style","width","onChange","values","includes","member_type","min","max","MembersBlock","userModal","MemberForm","handleNewItem","show","handleChangeItem","commonPart","reduce","acc","cur","part","className","map","hoverable","sirname","firstname","lastname","item","index","color","passport","MeetingsBlock","MeetingForm","history","useNavigate","newItem","format","type_of_cause","TabPane","Tabs","useParams","useEffect","href","defaultActiveKey","tab","baseURL","axios","headers"],"sourceRoot":""}