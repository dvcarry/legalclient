{"version":3,"file":"static/js/490.750e952d.chunk.js","mappings":"oKA8BYA,E,WAAZ,SAAYA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,OAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,IAKL,IAOKC,EAPCC,GAEZ,eACEF,EAAuBG,KAAO,+CADhC,SAEEH,EAAuBI,MAAQ,4EAFjC,IAKD,SAAYH,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,QAAAA,UAAAA,EAAAA,aAAAA,cAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,IAML,IAAMI,GAEZ,eACEJ,EAAgBK,MAAQ,mCAD1B,SAEEL,EAAgBM,QAAU,+CAF5B,SAGEN,EAAgBO,aAAe,uEAHjC,E,8GCxCWC,E,WAAZ,SAAYA,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAAAA,WAAAA,EAAAA,SAAAA,UAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,IAML,IAAMC,EAAe,CAC1B,CACEC,GAAIF,EAAeG,SACnBC,GAAI,oDAEN,CACEF,GAAIF,EAAeK,MACnBD,GAAI,uEAIKE,GAEZ,eACEN,EAAeG,SAAW,qDAD5B,SAEEH,EAAeK,MAAQ,uEAFzB,SAGEL,EAAeO,SAAW,0DAH5B,E,oJC1BYC,EAAgB,WACX,OAAD,kIACoBC,EAAAA,EAAAA,IAAoB,cADxC,uBACCC,EADD,EACLC,KADK,kBAEND,GAFM,4CAGd,EAJUF,EAAgB,SAKjBG,GAAiB,OAAD,kIACSF,EAAAA,EAAAA,KAAmB,aAAcE,GAD1C,uBACVD,EADU,EAChBC,KADgB,kBAEjBD,GAFiB,4CAGzB,ECPUE,EAAc,SACfC,GAAa,OAAD,kIACaJ,EAAAA,EAAAA,IAAsB,cAAgBI,GADnD,uBACNH,EADM,EACZC,KADY,kBAEbD,GAFa,4CAGrB,EAJUE,EAAc,SAKTD,GAAgB,OAAD,kIACIF,EAAAA,EAAAA,KAAmB,YAAaE,GADpC,uBACfD,EADe,EACrBC,KADqB,kBAEtBD,GAFsB,4CAG9B,ECPUI,EAAc,SACfD,GAAa,OAAD,kIACaJ,EAAAA,EAAAA,IAAkB,aAAeI,GAD9C,uBACNH,EADM,EACZC,KADY,kBAEbD,GAFa,4CAGrB,EAJUI,EAAc,SAKfC,EAAoBC,GAAe,OAAD,kIACTP,EAAAA,EAAAA,KAAmB,aAAc,CAChEM,WAAAA,EACAC,KAAAA,IAHwC,uBAC5BN,EAD4B,EAClCC,KADkC,kBAKnCD,GALmC,4CAM3C,EAXUI,EAAc,SAYRH,GAAiB,OAAD,kIACEF,EAAAA,EAAAA,IAAa,aAAcE,GAD7B,uBACjBD,EADiB,EACvBC,KADuB,kBAExBD,GAFwB,4CAGhC,ECfUO,EAAgB,SAKjBN,GAAkB,OAAD,kIACQF,EAAAA,EAAAA,KAAoB,cAAeE,GAD3C,uBACXD,EADW,EACjBC,KADiB,kBAElBD,GAFkB,4CAG1B,ECRUQ,EAAc,SAKfP,GAAkB,OAAD,kIACQF,EAAAA,EAAAA,KAAc,YAAaE,GADnC,uBACXD,EADW,EACjBC,KADiB,kBAElBD,GAFkB,4CAG1B,E,UCRUS,EAAe,SAMhBC,GAAe,OAAD,kIACWX,EAAAA,EAAAA,IAAa,aAAeW,GADvC,uBACRV,EADQ,EACdC,KADc,kBAEfD,GAFe,4CAGvB,ECkBUW,GAAWC,EAAAA,EAAAA,KAAAA,EAAuB,SAACC,GAAD,MAAU,CACvDC,UAAW,GACXC,QAAS,CACPZ,GAAI,GACJa,WAAY,CAAEV,KAAM,GAAIW,IAAK,GAAIC,IAAK,GAAIC,QAAS,IACnDC,QAAS,GACTC,SAAU,IAEZC,aAAa,WAAD,8BAAE,yGACWxB,IADX,OACNE,EADM,OAEZa,EAAI,CAAEC,UAAWd,IAFL,2CAAF,kDAAC,GAIbuB,WAAW,WAAD,8BAAE,WAAOC,GAAP,4FACa1B,EAAkB0B,GAD/B,OACJxB,EADI,OAEVa,GAAI,SAACY,GAAD,MAAY,CAAEX,UAAU,GAAD,eAAMW,EAAMX,WAAZ,CAAuBd,IAA9C,IAFM,2CAAF,mDAAC,GAIX0B,WAAW,WAAD,8BAAE,WAAOvB,GAAP,4FACaD,EAAgBC,GAD7B,OACJH,EADI,OAEVa,EAAI,CAAEE,QAASf,IAFL,2CAAF,mDAAC,GAIX2B,UAAU,WAAD,8BAAE,WAAO1B,GAAP,sFACcC,EAAsBD,GADpC,cAETY,GAAI,SAACY,GAAD,MAAY,CACdV,SAAQ,kBAAMU,EAAMV,SAAb,IAAsBK,QAAQ,GAAD,eAAMK,EAAMV,QAAQK,SAApB,CAA6BnB,MAD/D,IAFK,2CAAF,mDAAC,GAOV2B,QAAS,CACPzB,GAAI,GACJG,KAAM,GACNuB,KAAM,CAAEvB,KAAM,IAEdwB,UAAW,GACXC,QAAS,IAEXC,WAAW,WAAD,8BAAE,WAAO7B,GAAP,4FACaC,EAAgBD,GAD7B,OACJH,EADI,OAEVa,EAAI,CACFe,SAAQ,kBACH5B,GADE,IAEL6B,MAAK,kBACA7B,EAAS6B,MADV,IAEFI,gBACEjC,EAAS6B,KAAKI,iBACdC,IAAOlC,EAAS6B,KAAKI,gBAAiBE,EAAAA,GACxCC,qBACEpC,EAAS6B,KAAKO,sBACdF,IAAOlC,EAAS6B,KAAKO,qBAAsBD,EAAAA,SAZzC,2CAAF,mDAAC,GAkBXE,WAAW,WAAD,8BAAE,WAAOhC,EAAoBC,GAA3B,4FACaF,EAAgBC,EAAYC,GADzC,OACJN,EADI,OAEVa,GAAI,SAACY,GAAD,MAAY,CACdV,SAAQ,kBACHU,EAAMV,SADJ,IAELM,SAAS,GAAD,eAAMI,EAAMV,QAAQM,UAApB,CAA8BrB,MAHtC,IAFM,2CAAF,qDAAC,GASXsC,kBAAkB,WAAD,8BAAE,WAAOC,GAAP,sFACMnC,EAAuBmC,GAD7B,cAEjB1B,GAAI,SAACY,GAAD,MAAY,CACdG,SAAQ,kBACHH,EAAMG,SADJ,IAELC,MAAK,kBAAMJ,EAAMG,QAAQC,MAArB,IAA2BU,YAAAA,MAH/B,IAFa,2CAAF,mDAAC,GASlBC,WAAW,WAAD,8BAAE,WAAOvC,GAAP,4FACaM,EAAkBN,GAD/B,OACJD,EADI,OAEVa,GAAI,SAACY,GAAD,MAAY,CACdG,SAAQ,kBACHH,EAAMG,SADJ,IAELE,UAAU,GAAD,eAAML,EAAMG,QAAQE,WAApB,CAA+B9B,MAHxC,IAFM,2CAAF,mDAAC,GASXyC,UAAU,WAAD,8BAAE,WAAOxC,GAAP,4FACcO,EAAgBP,GAD9B,OACHD,EADG,OAETa,GAAI,SAACY,GAAD,MAAY,CACdG,SAAQ,kBACHH,EAAMG,SADJ,IAELG,QAAQ,GAAD,eAAMN,EAAMG,QAAQG,UAApB,OAAgC/B,MAHvC,IAFK,2CAAF,mDAAC,GASV0C,SAAU,CAAC,EACXC,WAAW,WAAD,8BAAE,WAAOjC,GAAP,4FACaD,EAAiBC,GAD9B,OACJV,EADI,OAEVa,GAAI,SAACY,GAAD,MAAY,CACdiB,UAAS,kBACJjB,EAAMiB,UADH,cAELhC,EAAOV,IAHR,IAFM,2CAAF,mDAAC,GA1FkC,G,8EChCxC,IAAMmC,EAAwB,mBACxBS,EAAyB,kB,yECD1BC,E,oJCMJC,EAAaC,EAAAA,EAAAA,SAEbC,GADYC,EAAAA,EAAAA,QACDC,EAAAA,EAAAA,QAEnB,EAAeC,EAAAA,GAAAA,QAAiB,YAA4C,IAAzCC,EAAwC,EAAxCA,SAC3BC,GAAQC,EAAAA,EAAAA,MACd,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eAGQC,GAAkB9C,EAAAA,EAAAA,IAAS,SAACc,GAAD,OAAWA,EAAMiB,QAAjB,IAA3Be,cAEFC,GAAeC,EAAAA,EAAAA,cAAY,WAC/BH,EAAKI,iBAAiBC,MAAK,WACzB,IAAMC,GAAW,UAAQN,EAAKO,kBAC9BV,EAAMW,QAAQF,GACdT,EAAMY,MACP,GACF,GAAE,CACDZ,EAEAG,IAUF,OACE,SAAC,KAAD,mBACMU,EAAAA,EAAAA,IAAUb,IADhB,IAEEc,MAAM,wFAENC,KAAMV,EAJR,UAME,UAAC,IAAD,CAAMF,KAAMA,EAAMa,OAAO,WAAWC,cAAelB,EAAnD,WACE,SAAC,SAAD,CACE9C,KAAK,mBACLiE,MAAM,gEACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CAAQC,YAAU,EAACC,MAAO,CAAEC,MAAO,QAAUC,SAzBxB,SAACC,GAC5B,IAAMC,EAAqBvB,EAAcwB,MAAK,SAAC7B,GAAD,OAAmBA,EAASjD,KAAO4E,CAAnC,IAC9CvB,EAAK0B,eAAe,CAAE5E,KAAM0E,EAAmB1E,MAChD,EAsBO,SACGmD,EAAc0B,KAAI,SAACC,GAAD,OACjB,SAACpC,EAAD,CAAsB+B,MAAOK,EAAKjF,GAAlC,SAAuCiF,EAAK9E,MAA/B8E,EAAKjF,GADD,SAKvB,SAAC,SAAD,CACEG,KAAK,OACLiE,MAAM,uCACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC5B,EAAD,OAEF,SAAC,SAAD,CACExC,KAAK,WACLiE,MAAM,sHACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC5B,EAAD,OAEF,SAAC,SAAD,CACExC,KAAK,cACLiE,MAAM,yDACNC,MAAO,CACL,CAEEE,QAAS,0CANf,UAUE,SAAC5B,EAAD,CAAUuC,KAAM,WAuBzB,ICpHD,EAAiC,+BAAjC,EAAyF,uCCa5EC,EAA6B,SAAC,GAA+B,IAA7BxD,EAA4B,EAA5BA,UAAWyD,EAAiB,EAAjBA,WACxDC,QAAQC,IAAI,uDAA8C3D,GAGxD,IAAM4D,GAAYpC,EAAAA,EAAAA,IAASqC,GACrBC,GAAcjF,EAAAA,EAAAA,IAAS,SAAAc,GAAK,OAAIA,EAAMe,UAAV,IAG5BqD,GAAgBlC,EAAAA,EAAAA,cAAY,WAChC+B,EAAUI,OAAOjC,MAAK,SAACkC,GAEnBH,GAAY,kBAAIG,GAAL,IAAcR,WAAAA,IAC5B,GACF,GAAE,CAACG,EAAW5D,IAETkE,GAAmBrC,EAAAA,EAAAA,cAAY,SAACP,GACpCsC,EAAUI,KAAK,CAAE1C,SAAAA,IAAYS,MAAK,SAACoC,GAElC,GACF,GAAE,CAACP,EAAW5D,IAKf,OACE,4BACE,SAAC,IAAD,CAAQpB,KAAK,UAAUwF,QAASL,EAAhC,sGAGA,gBAAKM,UAAU,QAAf,SACGrE,EAAUqD,KAAI,SAACC,GACd,OACE,UAAC,IAAD,CAAMgB,WAAS,EAACjC,MAAOiB,EAAK9E,KAAoB4F,QAAS,kBAAMF,EAAiBZ,EAAvB,EAAzD,WACE,iBAAKe,UAAWE,EAAhB,WACE,gBAAKF,UAAWE,EAAhB,yDACA,yBAAMjB,EAAKkB,eAEb,iBAAKH,UAAWE,EAAhB,WACE,gBAAKF,UAAWE,EAAhB,qEACA,yBAAMjB,EAAKmB,mBAPwBnB,EAAKjF,GAW/C,QAIR,E,8BCpDO6C,EAAWE,EAAAA,EAAAA,OAMNsD,EAAwB,SAAC,GAAoB,IAAlBxF,EAAiB,EAAjBA,WACtC,GAAwCyF,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,EAAepD,EAAAA,EAAAA,UAARC,GAAP,eAEA,GAKI7C,EAAAA,EAAAA,IAAS,SAACc,GAAD,OAAWA,CAAX,IAJXa,EADF,EACEA,kBAEgBnB,EAHlB,EAEEJ,QACEC,WAAcG,QAkClB,OAAKH,EAAWb,IAKd,4BACE,UAAC,IAAD,CACEqD,KAAMA,EACNa,OAAO,WACPuC,SAvCgB,SAACC,GACrBrB,QAAQC,IACN,oEACAoB,GAEFvE,GAAkB,kBAAKuE,GAAN,IAActB,WAAYvE,EAAWb,KACvD,EAkCKmE,cAAetD,EACf8F,SAAUJ,EALZ,WAOE,SAAC,SAAD,CACEpG,KAAK,gBACLiE,MAAM,0LACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CAAQC,YAAU,EAACC,MAAO,CAAEC,MAAO,QAAnC,SACGkC,OAAOC,KAAKjI,EAAAA,IAAwBoG,KAAI,SAACzE,GAAD,OACvC,SAAC,EAAD,UAAoB3B,EAAAA,GAAuB2B,IAA9BA,EAD0B,SAK7C,SAAC,SAAD,CACEJ,KAAK,OACLiE,MAAM,sEACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CACEC,YAAU,EACVC,MAAO,CAAEC,MAAO,QAFlB,SAKGkC,OAAOC,KAAK9H,EAAAA,IAAeiG,KAAI,SAACzE,GAAD,OAC9B,SAAC,EAAD,CAAmBqE,MAAOrE,EAA1B,SACGxB,EAAAA,GAAcwB,IADJA,EADiB,SAQpC,SAAC,SAAD,CACEJ,KAAK,kBACLiE,MAAM,+KACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CACEuC,YAAY,GACZC,SAAU,CAAEC,OAAQ,QAASC,WAAY,IACzCC,SAAS,EACTC,YAAY,EACZH,OAAQvE,EAAAA,EACRkC,SAnFoB,SAACC,GAC7B,IAAMwC,EAAwBxC,EAAMyC,SAAS,EAAG,SAChDhE,EAAK0B,eAAe,CAAE9C,qBAAsBmF,GAC7C,OAmFK,SAAC,SAAD,CACEjH,KAAK,uBACLiE,MAAM,sOACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CACEuC,YAAY,GACZC,SAAU,CAAEC,OAAQ,QAASC,WAAY,IACzCC,SAAS,EACTC,YAAY,EACZH,OAAQvE,EAAAA,OAGZ,SAAC,SAAD,CACEtC,KAAK,qBACLiE,MAAM,+IACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,OAEF,SAAC,SAAD,WAIIgC,IACA,SAAC,IAAD,CAAQhG,KAAK,UAAU+G,SAAS,SAAhC,yEAMLf,GACC,SAAC,IAAD,CAAQhG,KAAK,UAAUwF,QAvIP,WACflF,EAAW0G,oBACdlE,EAAK0B,eAAe,CAAEwC,mBAAoBvG,IAE5CwF,GAAiBD,EAClB,EAkIK,8DAGE,QAnHC,IAsHV,E,qBJ/KD,SAAY7D,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,aAAAA,eAAAA,EAAAA,SAAAA,UAAAA,CAAZ,CAAYA,IAAAA,EAAAA,CAAAA,IAML,I,EKLF8E,ELKQC,GAAc,eACtB/E,EAAgBgF,SAAW,2DADL,SAEtBhF,EAAgBiF,aAAe,0UAFT,SAGtBjF,EAAgBkF,SAAW,oDAHL,GMIdC,EAA2B,SAAC,GAAoB,IAAlBtH,EAAiB,EAAjBA,KAAMuH,EAAW,EAAXA,KAC/C,GAAkCxB,EAAAA,EAAAA,WAAS,GAA3C,yBAMA,OACE,SAAC,IAAD,CAAMtC,MAAOyD,EAAelH,GAA5B,UACE,0BAIE,SAAC,IAAD,CAAQwH,KAAMD,EAAME,UAAQ,EAACzH,KAAK,OAAlC,2DASP,E,oBCHY0H,EAA6B,SAAC,GAA0B,IAAxBxG,EAAuB,EAAvBA,QAAuB,EAAdb,QA4BpD,OAAiC,IAA7Ba,EAAQE,UAAUuG,QAElB,SAAC,IAAD,CACE3D,QAAQ,uaACRhE,KAAK,aAQT,0BACE,iBAAKyF,UAAU,QAAf,WACE,SAAC6B,EAAD,CACEtH,KAAMmC,EAAgBiF,aAEtBG,KAAI,UAAKK,EAAAA,EAAL,sBAA0B1G,EAAQzB,GAAlC,YAAwC0C,EAAgBiF,iBAE9D,SAACE,EAAD,CACEtH,KAAMmC,EAAgBgF,SACtBI,KAAI,UAAKK,EAAAA,EAAL,sBAA0B1G,EAAQzB,GAAlC,YAAwC0C,EAAgBgF,gBASrE,E,oBFtFIF,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,EAAAA,QAAAA,GAAAA,SAAAA,C,CAAAA,IAAAA,EAAAA,CAAAA,IAWE,IAAMY,GAEV,eACEZ,EAAaa,IAAM,iBADrB,SAEEb,EAAac,GAAK,yCAFpB,SAGEd,EAAae,QAAU,sEAHzB,GGNK1F,EAAWE,EAAAA,EAAAA,OAEnB,EAAeC,EAAAA,GAAAA,QACb,YAYM,EAXJpC,QAWK,IAVLe,EAUI,EAVJA,UACAV,EASI,EATJA,QACAuH,EAQI,EARJA,OACA5G,EAOI,EAPJA,QAQMsB,GAAQC,EAAAA,EAAAA,MACd,EAAeC,EAAAA,EAAAA,UAARC,GAAP,eAEAgC,QAAQC,IAAI,SAAUkD,GACtBnD,QAAQC,IAAI,UAAW1D,GAEvB,IAAM6G,EAAkB7G,EAAQoD,KAAI,SAAAwD,GAAM,OAAIA,EAAOE,SAAX,IACpCC,EAAiB1H,EAAQ2H,QAAO,SAAAC,GAAM,OAAIA,EAAOtI,KAAKuI,SAAS3J,EAAAA,GAAAA,SAA0BsJ,EAAgBK,SAASD,EAAO7I,GAAnF,IAEtCuD,GAAeC,EAAAA,EAAAA,cAAY,WAC/BH,EAAKI,iBAAiBC,MAAK,WACzB,IAAMgD,GAAM,UAAQrD,EAAKO,kBACnBhC,EAAUgF,OAAOC,KAAKH,GAAQkC,QAAO,SAAA3D,GAAI,MAAa,cAATA,CAAJ,IAA0BD,KAAI,SAAA+D,GAAU,MAAK,CAACC,aAAcD,EAAYL,UAAWhC,EAAOgC,UAAWO,OAAQvC,EAAOqC,GAA5E,IACvF7F,EAAMW,QAAQjC,GACdsB,EAAMY,MACP,GACF,GAAE,CACDZ,EAEAG,IAEF,OACE,SAAC,KAAD,mBACMU,EAAAA,EAAAA,IAAUb,IADhB,IAEEc,MAAM,kFAENkF,OAAO,yDACPC,WAAW,uCACXlF,KAAMV,EANR,UAQE,UAAC,IAAD,CAAMF,KAAMA,EAAMa,OAAO,WAAWC,cAAeqE,EAAnD,WACE,SAAC,SAAD,CACErI,KAAK,YACLiE,MAAM,mDACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CANf,UAUE,SAAC,IAAD,CACEC,YAAU,EACVC,MAAO,CAAEC,MAAO,QAFlB,SAMGiE,EAAe3D,KAAI,SAAC6D,GAAD,OAClB,SAAC,EAAD,CAEEjE,MAAOiE,EAAO7I,GAFhB,mBAGK6I,EAAOO,QAHZ,YAGuBP,EAAOQ,UAH9B,YAG2CR,EAAOS,WAF3CT,EAAO7I,GAFI,QAQvB2B,EAAUqD,KAAI,SAAC/B,GACd,OACE,SAAC,SAAD,CAEE9C,KAAM8C,EAASjD,GACfoE,MAAK,qDAAanB,EAASsG,MAAtB,aAAgCtG,EAASkD,UAC9C9B,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,0CAPf,UAWE,SAAC,IAAD,CACEC,YAAU,EACVC,MAAO,CAAEC,MAAO,QAFlB,SAKGkC,OAAOC,KAAKuB,GAAcpD,KAAI,SAACC,EAAMsE,GAAP,OAC7B,SAAC,EAAD,CAAoB3E,MAAOK,EAA3B,SAAkCmD,EAAanD,IAAlCsE,EADgB,OAf5BtG,EAASsG,MAqBnB,SAIR,IC7EUC,EAA2B,SAAC,GAAgD,IAZ1D5H,EAAoB6H,EAYRhI,EAA6C,EAA7CA,QAAoBR,GAAyB,EAApCyI,UAAoC,EAAzBzI,SAASU,EAAgB,EAAhBA,UAChE4D,GAAYpC,EAAAA,EAAAA,IAASwG,GACrBrH,GAAY9B,EAAAA,EAAAA,IAAS,SAAAc,GAAK,OAAIA,EAAMgB,SAAV,IAG1BoD,GAAgBlC,EAAAA,EAAAA,cAAY,WAChC+B,EAAUI,KAAK,CAAEhE,UAAAA,EAAWV,QAAAA,EAASW,QAASH,EAAQG,UAAW8B,MAAK,SAACkC,GACrEtD,EAAUsD,EAGX,GACF,GAAE,CAACL,EAAW9D,EAAQE,YAEjBkE,GAAmBrC,EAAAA,EAAAA,cAAY,SAACgF,GACpCjD,EAAUI,KAAK,CAAE6C,OAAAA,IAAU9E,MAAK,SAACoC,GAEhC,GACF,GAAE,CAACP,EAAW5D,IAETiI,GA/BuBhI,EA+BwBH,EAAQG,QA/BZ6H,EA+BqB,YA9B/D7H,EAAQiI,QAAO,SAACC,EAA6BC,GAElD,IAAMC,EAAMD,EAAIN,GAKhB,OAJKK,EAAIE,KACNF,EAAIE,GAA2B,IAElCF,EAAIE,GAAyBC,KAAKF,GAC3BD,CACT,GAAE,CAAC,IAwBH,OACE,4BACE,SAAC,IAAD,CAAQvJ,KAAK,UAAUwF,QAASL,EAAhC,gGAGA,gBAAKM,UAAU,QAAf,SAEIY,OAAOC,KAAK+C,GAAwB5E,KAAI,SAACC,GACrCI,QAAQC,IAAI,gEAAuDL,GACnE,IAAM4D,EAAS5H,EAAQ6D,MAAK,SAAA+D,GAAM,OAAIA,EAAO7I,MAAQiF,CAAnB,IAClC,OAAO,SAAC,IAAD,CAAMgB,WAAS,EAACjC,MAAK,iBAAK6E,QAAL,IAAKA,OAAL,EAAKA,EAAQO,QAAb,mBAAwBP,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAQQ,UAAhC,mBAA6CR,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAQS,SAArD,oBAAkET,QAAlE,IAAkEA,OAAlE,EAAkEA,EAAQqB,KAA1E,KAAoGnE,QAAS,kBAAMF,EAAiBZ,EAAvB,EAAlI,SAEH2E,EAAuB3E,GAAMD,KAAI,SAAAwD,GAC/B,IAAMvF,EAAWxB,EAAQE,UAAUmD,MAAK,SAAA7B,GAAQ,OAAIA,EAASjD,KAAOwI,EAAOQ,WAA3B,IAChD,OAAO,kCACJ/F,QADI,IACJA,OADI,EACJA,EAAUkD,SADN,OACkB,0BAAOiC,EAAaI,EAAOS,YADnCT,EAAOxI,GAGzB,KAPE,OAA6G6I,QAA7G,IAA6GA,OAA7G,EAA6GA,EAAQ7I,GAU/H,QAKV,EC/CYmK,EAA2B,SAAC,GAA0B,IAAxB1I,EAAuB,EAAvBA,QAAuB,EAAdb,QAClD,OACE,0BACE,gBAAKoF,UAAU,QAAf,UACE,SAAC6B,EAAD,CACEtH,KAAMmC,EAAgBkF,SACtBE,KAAI,UAAKK,EAAAA,EAAL,sBAA0B1G,EAAQzB,GAAlC,YAAwC0C,EAAgBkF,eAKrE,EC7BOwC,EAAYC,EAAAA,EAAAA,QA6DpB,EA3D+B,WAC7B,IAAQrK,GAAOsK,EAAAA,EAAAA,MAAPtK,GAER,GAAqDQ,EAAAA,EAAAA,IAAS,SAACc,GAAD,OAAWA,CAAX,IAAtDV,EAAR,EAAQA,QAASa,EAAjB,EAAiBA,QAASI,EAA1B,EAA0BA,WAAYW,EAAtC,EAAsCA,WAStC,OAPA+H,EAAAA,EAAAA,YAAU,WACJvK,IACF6B,EAAW7B,GACXwC,EAAW,iBAEd,GAAE,CAACxC,IAECyB,GAKH,4BACE,UAAC,IAAD,YACE,SAAC,SAAD,WACE,cAAGsG,KAAK,IAAR,2DAEF,SAAC,SAAD,WACE,cAAGA,KAAK,aAAR,iEAEF,SAAC,SAAD,WACE,cAAGA,KAAM,sBAAgBnH,QAAhB,IAAgBA,OAAhB,EAAgBA,EAASZ,IAAlC,gBAAuCY,QAAvC,IAAuCA,OAAvC,EAAuCA,EAASC,WAAWV,aAG/D,gBAAK6F,UAAU,SAAf,UACE,+EAAevE,EAAQC,KAAKvB,WAE9B,UAAC,IAAD,CACEqK,iBAAiB,IADnB,WAIE,SAACJ,EAAD,CAASK,IAAI,+DAAb,UACE,SAACpE,EAAD,CAAWxF,WAAYY,EAAQC,QADH,MAG9B,SAAC0I,EAAD,CAASK,IAAI,mDAAb,UACE,SAACtF,EAAD,CACExD,UAAWF,EAAQE,UACnByD,WAAY3D,EAAQzB,MAHI,MAM5B,SAACoK,EAAD,CAASK,IAAI,yDAAb,UACE,SAACxC,EAAD,CAAgBxG,QAASA,EAASb,QAASA,KADhB,MAG7B,SAACwJ,EAAD,CAASK,IAAI,qEAAb,UACE,SAACjB,EAAD,CAAc7H,UAAWF,EAAQE,UAAY+H,UAAWjI,EAAQzB,GAAIiB,QAASL,EAAQK,QAASQ,QAASA,KAD1E,MAG/B,SAAC2I,EAAD,CAASK,IAAI,mDAAb,UACE,SAACN,EAAD,CAAc1I,QAASA,EAASb,QAASA,KADf,WAtCzB,IA4CV,C,4FCnEYuH,EAAU,+BAEVvI,E,MAAM8K,GAAAA,OAAa,CAC9BvC,QAAAA,EACAwC,QAAS,CACP,eAAgB,qB","sources":["entities/meeting/types.ts","entities/member/types.ts","pages/companies/api-companies.ts","pages/companyDetails/api-company.ts","pages/meetingDetails/api-meeting.ts","pages/meetingDetails/blocks/questionsBlock/api-questions.ts","pages/meetingDetails/blocks/answersBlock/api-answers.ts","shared/api/api-catalogs.ts","entities/store/index.ts","features/dates.ts","entities/documents/types.ts","entities/meeting/question.tsx","webpack://legal/./src/pages/meetingDetails/blocks/questionsBlock/styles.module.scss?0616","pages/meetingDetails/blocks/questionsBlock/index.tsx","pages/meetingDetails/blocks/infoBlock/index.tsx","entities/answer/types.ts","entities/documents/DocumentCard.tsx","pages/meetingDetails/blocks/documents/index.tsx","entities/answer/form.tsx","pages/meetingDetails/blocks/answersBlock/index.tsx","pages/meetingDetails/blocks/meetingBlock/index.tsx","pages/meetingDetails/index.tsx","shared/config/api.ts"],"sourcesContent":["import { IAnswer } from \"entities/answer/types\";\r\nimport { Moment } from \"moment\";\r\n\r\nexport interface IQuestion {\r\n  id: number;\r\n  index: number;\r\n  name: string;\r\n  solution: string;\r\n  description: string;\r\n}\r\n\r\nexport interface IMeeting {\r\n  id: string;\r\n  name: string;\r\n  info: {\r\n    name: string;\r\n    date_of_meeting?: Moment;\r\n    date_of_registration?: Moment;\r\n    address_of_meeting?: string;\r\n    type?: MeetingTypeEnum;\r\n    type_of_cause?: MeetingTypeOfСauseEnum;\r\n  };\r\n  questions: IQuestion[];\r\n  // dateOfMeeting?: Date;\r\n  // addressOfMeeting?: string;\r\n  // type?: MeetingTypeEnum;\r\n  // typeOfСause?: MeetingTypeOfСauseEnum;\r\n  answers: IAnswer[];\r\n}\r\n\r\nexport enum MeetingTypeOfСauseEnum {\r\n  year = \"year\",\r\n  extra = \"extra\",\r\n}\r\n\r\nexport const MEETING_TYPES_OF_CAUSE: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeOfСauseEnum.year]: \"годовое\",\r\n  [MeetingTypeOfСauseEnum.extra]: \"внеочередное\",\r\n};\r\n\r\nexport enum MeetingTypeEnum {\r\n  ochno = \"ochno\",\r\n  zaochno = \"zaochno\",\r\n  ochnozaochno = \"ochnozaochno\",\r\n}\r\n\r\nexport const MEETING_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeEnum.ochno]: \"очное\",\r\n  [MeetingTypeEnum.zaochno]: \"заочное\",\r\n  [MeetingTypeEnum.ochnozaochno]: \"очно-заочное\",\r\n};\r\n","export interface IMember {\r\n  id?: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  sirname: string;\r\n  passport: string;\r\n  type: MemberTypeEnum[];\r\n  part?: number;\r\n}\r\n\r\nexport enum MemberTypeEnum {\r\n  owner = \"owner\",\r\n  director = \"director\",\r\n  employee = \"employee\",\r\n}\r\n\r\nexport const MEMBER_TYPES = [\r\n  {\r\n    en: MemberTypeEnum.director,\r\n    ru: \"директор\",\r\n  },\r\n  {\r\n    en: MemberTypeEnum.owner,\r\n    ru: \"собственник\",\r\n  },\r\n];\r\n\r\nexport const MEMBERS_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberTypeEnum.director]: \"директор\",\r\n  [MemberTypeEnum.owner]: \"собственник\",\r\n  [MemberTypeEnum.employee]: \"сотрудник\",\r\n};\r\n","import { ICompany } from \"entities/company/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANIES = {\r\n  async getAll() {\r\n    const { data: response } = await api.get<ICompany[]>(\"/companies\");\r\n    return response;\r\n  },\r\n  async add(data: ICompany) {\r\n    const { data: response } = await api.post<ICompany>(\"/companies\", data);\r\n    return response;\r\n  },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANY = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<ICompanyFull>(\"/companies/\" + id);\r\n    return response;\r\n  },\r\n  async addMember(data: IMember) {\r\n    const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n    return response;\r\n  },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_MEETING = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n    return response;\r\n  },\r\n  async add(company_id: string, name: string) {\r\n    const { data: response } = await api.post<IMeeting>(\"/meetings/\", {\r\n      company_id,\r\n      name,\r\n    });\r\n    return response;\r\n  },\r\n  async changeInfo(data: IMeeting) {\r\n    const { data: response } = await api.put<any>(\"/meetings/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_QUESTIONS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IQuestion) {\r\n    const { data: response } = await api.post<IQuestion>(\"/questions/\", data);\r\n    return response;\r\n  },\r\n  async getQuestionTypes() {\r\n    const { data: response } = await api.get<any>(\"/catalogs/question_type\");\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_ANSWERS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IAnswer[]) {\r\n    const { data: response } = await api.post<any>(\"/answers/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_CATALOGS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/catalogs/\" + type);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import create from \"zustand\";\r\nimport moment from \"moment\";\r\n\r\nimport { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { API_COMPANIES } from \"pages/companies/api-companies\";\r\nimport { API_COMPANY } from \"pages/companyDetails/api-company\";\r\nimport { API_MEETING } from \"pages/meetingDetails/api-meeting\";\r\nimport { API_QUESTIONS } from \"pages/meetingDetails/blocks/questionsBlock/api-questions\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { API_ANSWERS } from \"pages/meetingDetails/blocks/answersBlock/api-answers\";\r\nimport { dateWithTimeGetFormat } from \"features/dates\";\r\nimport { API_CATALOGS } from \"shared/api/api-catalogs\";\r\n\r\ninterface CompanyState {\r\n  companies: ICompany[];\r\n  getCompanies: () => void;\r\n  addCompany: (newCompany: ICompany) => void;\r\n  company: ICompanyFull;\r\n  getCompany: (id: string) => void;\r\n  addMember: (data: IMember) => void;\r\n  meeting: IMeeting;\r\n  getMeeting: (id: string) => void;\r\n  addMeeting: (company_id: string, name: string) => void;\r\n  changeMeetingInfo: (meetingInfo: any) => void;\r\n  addQuesion: (data: IQuestion) => void;\r\n  addAnswer: (data: IAnswer[]) => void;\r\n  catalogs: any;\r\n  getGatalog: (type: string) => void;\r\n}\r\n\r\nexport const useStore = create<CompanyState>()((set) => ({\r\n  companies: [],\r\n  company: {\r\n    id: \"\",\r\n    requisites: { name: \"\", inn: \"\", kpp: \"\", address: \"\" },\r\n    members: [],\r\n    meetings: [],\r\n  },\r\n  getCompanies: async () => {\r\n    const response = await API_COMPANIES.getAll();\r\n    set({ companies: response });\r\n  },\r\n  addCompany: async (newCompany) => {\r\n    const response = await API_COMPANIES.add(newCompany);\r\n    set((state) => ({ companies: [...state.companies, response] }));\r\n  },\r\n  getCompany: async (id: string) => {\r\n    const response = await API_COMPANY.get(id);\r\n    set({ company: response });\r\n  },\r\n  addMember: async (data: IMember) => {\r\n    const response = await API_COMPANY.addMember(data);\r\n    set((state) => ({\r\n      company: { ...state.company, members: [...state.company.members, data] },\r\n    }));\r\n    // set((state) => ({ company: {...state.company, members: [...state.company?.members, response]} }));\r\n  },\r\n  meeting: {\r\n    id: \"\",\r\n    name: \"\",\r\n    info: { name: \"\" },\r\n    // typeOfСause: '',\r\n    questions: [],\r\n    answers: [],\r\n  },\r\n  getMeeting: async (id: string) => {\r\n    const response = await API_MEETING.get(id);\r\n    set({\r\n      meeting: {\r\n        ...response,\r\n        info: {\r\n          ...response.info,\r\n          date_of_meeting:\r\n            response.info.date_of_meeting &&\r\n            moment(response.info.date_of_meeting, dateWithTimeGetFormat),\r\n          date_of_registration:\r\n            response.info.date_of_registration &&\r\n            moment(response.info.date_of_registration, dateWithTimeGetFormat),\r\n        },\r\n      },\r\n    });\r\n    // set({ meeting: response});\r\n  },\r\n  addMeeting: async (company_id: string, name: string) => {\r\n    const response = await API_MEETING.add(company_id, name);\r\n    set((state) => ({\r\n      company: {\r\n        ...state.company,\r\n        meetings: [...state.company.meetings, response],\r\n      },\r\n    }));\r\n  },\r\n  changeMeetingInfo: async (meetingInfo: any) => {\r\n    const response = await API_MEETING.changeInfo(meetingInfo);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        info: { ...state.meeting.info, meetingInfo },\r\n      },\r\n    }));\r\n  },\r\n  addQuesion: async (data: IQuestion) => {\r\n    const response = await API_QUESTIONS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        questions: [...state.meeting.questions, response],\r\n      },\r\n    }));\r\n  },\r\n  addAnswer: async (data: IAnswer[]) => {\r\n    const response = await API_ANSWERS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        answers: [...state.meeting.answers, ...response],\r\n      },\r\n    }));\r\n  },\r\n  catalogs: {},\r\n  getGatalog: async (type: string) => {\r\n    const response = await API_CATALOGS.get(type);\r\n    set((state) => ({\r\n      catalogs: {\r\n        ...state.catalogs,\r\n        [type]: response,\r\n      },\r\n    }));\r\n  },\r\n}));\r\n","export const dateWithTimeGetFormat = 'YYYY-MM-DDTHH:mm';\r\nexport const dateWithTimeShowFormat = 'DD.MM.YYYY HH:mm';","export enum IDocumentsTypes {\r\n    bulletin = 'bulletin',\r\n    notification = 'notification',\r\n    protocol = 'protocol'\r\n}\r\n\r\nexport const DOCUMENT_TYPES = {\r\n    [IDocumentsTypes.bulletin]: 'Бюллетень',\r\n    [IDocumentsTypes.notification]: 'Уведомление о созыве и проведении общего собрания участников',\r\n    [IDocumentsTypes.protocol]: 'Протокол',\r\n}","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal, Select, Upload } from \"antd\";\r\nimport { useStore } from \"entities/store\";\r\nimport { useCallback } from \"react\";\r\nimport { IQuestion } from \"./types\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Dragger } = Upload;\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(({ question }: { question: IQuestion }) => {\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n\r\n  const { question_type } = useStore((state) => state.catalogs);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newQuestion = { ...form.getFieldsValue() };\r\n      modal.resolve(newQuestion);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n\r\n  const onTypeQuestionChange = (value: any) => {\r\n    const nameOfQuestionType = question_type.find((question: any) => question.id === value)\r\n    form.setFieldsValue({ name: nameOfQuestionType.name });\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Вопрос повестки\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      onOk={handleSubmit}\r\n    >\r\n      <Form form={form} layout=\"vertical\" initialValues={question}>\r\n        <Form.Item\r\n          name=\"question_type_id\"\r\n          label=\"Тип вопроса\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select allowClear style={{ width: \"100%\" }} onChange={onTypeQuestionChange}>\r\n            {question_type.map((item: any) => (\r\n              <Option key={item.id} value={item.id}>{item.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Вопрос\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"solution\"\r\n          label=\"Предложенное решение\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Пояснения\"\r\n          rules={[\r\n            {\r\n              // required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea rows={8} />\r\n        </Form.Item>\r\n\r\n        {/* <Form.Item\r\n          name=\"files\"\r\n          label=\"Дополнительные файлы\"\r\n\r\n        >\r\n          <Dragger \r\n          >\r\n            <p className=\"ant-upload-drag-icon\">\r\n            </p>\r\n            <p className=\"ant-upload-text\">\r\n              Загрузите необходимые документы\r\n            </p>\r\n            <p className=\"ant-upload-hint\">\r\n              Перенесите нужные файлы или нажмите на эту кнопку\r\n            </p>\r\n          </Dragger>\r\n        </Form.Item> */}\r\n      </Form>\r\n    </Modal>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"question_block\":\"styles_question_block__kL+9e\",\"question_block_heading\":\"styles_question_block_heading__US8BW\"};","import { Button, Card } from \"antd\";\r\nimport { FC, useCallback } from \"react\";\r\nimport { useModal } from \"@ebay/nice-modal-react\";\r\n\r\nimport QuestionForm from \"entities/meeting/question\";\r\nimport { IQuestion } from \"entities/meeting/types\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { useStore } from \"entities/store\";\r\n\r\ninterface IProps {\r\n  questions: IQuestion[];\r\n  meeting_id: string;\r\n}\r\n\r\nexport const QuestionsBlock: FC<IProps> = ({ questions, meeting_id }) => {\r\nconsole.log(\"🚀 ~ file: index.tsx ~ line 20 ~ questions\", questions)\r\n\r\n\r\n  const userModal = useModal(QuestionForm);\r\n  const addQuestion = useStore(state => state.addQuesion)\r\n  // const [items, setItems] = useState<any[]>([]);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newItem: any) => {\r\n        // setItems([newItem, ...items]);\r\n        addQuestion({...newItem, meeting_id})\r\n    });\r\n  }, [userModal, questions]);\r\n\r\n  const handleChangeItem = useCallback((question: any) => {\r\n    userModal.show({ question }).then((newMember: any) => {\r\n      // addMember({ ...newMember, company_id });\r\n    });\r\n  }, [userModal, questions]);\r\n\r\n  // const { items, handleNewItem } = useItems<IQuestion>(QuestionForm);\r\n  // console.log(\"🚀 ~ file: index.tsx ~ line 28 ~ items\", items);\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить вопрос\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {questions.map((item) => {\r\n          return (\r\n            <Card hoverable title={item.name} key={item.id} onClick={() => handleChangeItem(item)}>\r\n              <div className={styles.question_block}>\r\n                <div className={styles.question_block_heading}>Решение</div>\r\n                <div>{item.solution}</div>\r\n              </div>\r\n              <div className={styles.question_block}>\r\n                <div className={styles.question_block_heading}>Пояснения</div>\r\n                <div>{item.description}</div>\r\n              </div>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { Button, DatePicker, Form, Input, Select } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport moment from \"moment\";\r\n\r\nimport { MEETING_TYPES, MEETING_TYPES_OF_CAUSE } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { dateWithTimeGetFormat, dateWithTimeShowFormat } from \"features/dates\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  requisites: any;\r\n}\r\n\r\nexport const InfoBlock: FC<IProps> = ({ requisites }) => {\r\n  const [isActiveForm, setIsActiveForm] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  const {\r\n    changeMeetingInfo,\r\n    company: {\r\n      requisites: { address },\r\n    },\r\n  } = useStore((state) => state);\r\n\r\n  const submitHandler = (values: any) => {\r\n    console.log(\r\n      \"🚀 ~ file: index.tsx ~ line 24 ~ submitHandler ~ values\",\r\n      values\r\n    );\r\n    changeMeetingInfo({ ...values, meeting_id: requisites.id });\r\n  };\r\n\r\n  const activeHandler = () => {\r\n    if (!requisites.address_of_meeting) {\r\n      form.setFieldsValue({ address_of_meeting: address });\r\n    }\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  const onDateOfMeetingChange = (value: any) => {\r\n    const dateMinusSeveralHours = value.subtract(1, \"hours\");\r\n    form.setFieldsValue({ date_of_registration: dateMinusSeveralHours });\r\n  };\r\n\r\n  const onAddressClick = () => {\r\n    // console.log(address);\r\n    form.setFieldsValue({ address_of_meeting: 'dddd' });\r\n    // form.setFieldsValue({ address_of_meeting: address });\r\n  };\r\n\r\n  // useEffect(() => {\r\n\r\n  // },[])\r\n\r\n  if (!requisites.id) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        onFinish={submitHandler}\r\n        initialValues={requisites}\r\n        disabled={isActiveForm}\r\n      >\r\n        <Form.Item\r\n          name=\"type_of_cause\"\r\n          label=\"Годовое или внеочередное собрание\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select allowClear style={{ width: \"100%\" }}>\r\n            {Object.keys(MEETING_TYPES_OF_CAUSE).map((type) => (\r\n              <Option key={type}>{MEETING_TYPES_OF_CAUSE[type]}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type\"\r\n          label=\"Тип собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            // onChange={handleChange}\r\n          >\r\n            {Object.keys(MEETING_TYPES).map((type) => (\r\n              <Option key={type} value={type}>\r\n                {MEETING_TYPES[type]}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"date_of_meeting\"\r\n          label=\"Дата и время проведения собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <DatePicker\r\n            placeholder=\"\"\r\n            showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n            showNow={false}\r\n            showSecond={false}\r\n            format={dateWithTimeShowFormat}\r\n            onChange={onDateOfMeetingChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_of_registration\"\r\n          label=\"Дата и время начала регистрации участников\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <DatePicker\r\n            placeholder=\"\"\r\n            showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n            showNow={false}\r\n            showSecond={false}\r\n            format={dateWithTimeShowFormat}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"address_of_meeting\"\r\n          label=\"Адрес проведения собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />          \r\n        </Form.Item>\r\n        <Form.Item>\r\n          {/* <Button type=\"primary\" htmlType=\"submit\">\r\n            Сохранить\r\n          </Button> */}\r\n          {!isActiveForm && (\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Сохранить\r\n            </Button>\r\n          )}\r\n        </Form.Item>\r\n      </Form>\r\n      {isActiveForm ? (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Изменить\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n","\r\nenum ResultsTypes {\r\n    yes = 2,\r\n    no = 1,\r\n    refrain = 0\r\n}\r\n// enum ResultsTypes {\r\n//     yes = 'yes',\r\n//     no = 'no',\r\n//     refrain = 'refrain'\r\n// }\r\n\r\nexport const RESULT_TYPES: {\r\n    [index: string]: string;\r\n  } = {\r\n    [ResultsTypes.yes]: \"За\",\r\n    [ResultsTypes.no]: \"Против\",\r\n    [ResultsTypes.refrain]: \"Воздержался\",\r\n  }; \r\n\r\nexport interface IAnswer {\r\n    id: number;\r\n    question_id: string;\r\n    member_id: number;\r\n    result: ResultsTypes;\r\n}","import { Button, Card } from \"antd\";\r\nimport { FC, ReactNode, useState } from \"react\";\r\nimport { DOCUMENT_TYPES, IDocumentsTypes } from \"./types\";\r\n\r\ninterface IProps {\r\n  type: IDocumentsTypes;\r\n  // Component: ReactNode;\r\n  link: string;\r\n}\r\n\r\nexport const DocumentCard: FC<IProps> = ({ type, link }) => {\r\n  const [isPreview, setIsPreview] = useState(false);\r\n\r\n  const previewHandler = () => {\r\n    setIsPreview(!isPreview);\r\n  };\r\n\r\n  return (\r\n    <Card title={DOCUMENT_TYPES[type]}>\r\n      <div>\r\n        {/* <Button type=\"link\" onClick={previewHandler}>\r\n          Предосмотр\r\n        </Button> */}\r\n        <Button href={link} download type=\"link\" >Скачать</Button>\r\n      </div>\r\n      {/* <div>\r\n        {\r\n            isPreview ? Component : null\r\n        }\r\n      </div> */}\r\n    </Card>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport {\r\n  Packer,\r\n  Document,\r\n  Paragraph,\r\n  TextRun,\r\n  AlignmentType,\r\n  HeadingLevel,\r\n  TabStopType,\r\n  TabStopPosition,\r\n} from \"docx\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { NotificationDoc } from \"entities/documents/notification\";\r\nimport { Bulletin } from \"entities/documents/bulletin\";\r\nimport { DocumentCard } from \"entities/documents/DocumentCard\";\r\nimport { IDocumentsTypes } from \"entities/documents/types\";\r\nimport { ICompanyFull } from \"entities/company/types\";\r\nimport { ProtocolDoc } from \"entities/documents/protocol\";\r\nimport { RESULT_TYPES } from \"entities/answer/types\";\r\nimport { baseURL } from \"shared/config/api\";\r\nimport { Alert } from \"antd\";\r\n\r\ninterface IProps {\r\n  meeting: IMeeting;\r\n  company: ICompanyFull;\r\n}\r\n\r\nexport const DocumentsBlock: FC<IProps> = ({ meeting, company }) => {\r\n  // const answeredMembersId = [\r\n  //   ...new Set(meeting.answers.map((answer) => answer.member_id)),\r\n  // ];\r\n  // const answeredMembers = company.members.filter((member) =>\r\n  //   answeredMembersId.includes(member.id!)\r\n  // );\r\n  // const quorum = answeredMembers.reduce((acc, cur) => acc + +cur.part!, 0);\r\n\r\n  // const answersResults = meeting.questions.map((question) => {\r\n  //   const answersForQuestion = meeting.answers.filter(\r\n  //     (answer) => +answer.question_id === question.id\r\n  //   );\r\n\r\n  //   const results = Object.values(RESULT_TYPES).map((item) => {\r\n  //     return {\r\n  //       type: item,\r\n  //       value: 1,\r\n  //     };\r\n  //   });\r\n\r\n  //   return {\r\n  //     ...question,\r\n  //     answers: answersForQuestion,\r\n  //     results: [],\r\n  //   };\r\n  // });\r\n\r\n  if (meeting.questions.length === 0) {\r\n    return (\r\n      <Alert\r\n        message=\"Нет повестки собрания для формирования документов. Добавьте, вопросы в повестку.\"\r\n        type=\"warning\"\r\n        // closable\r\n        // onClose={onClose}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"cards\">\r\n        <DocumentCard\r\n          type={IDocumentsTypes.notification}\r\n          // Component={<NotificationDoc meeting={meeting} company={company!} />}\r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.notification}`}\r\n        />\r\n        <DocumentCard\r\n          type={IDocumentsTypes.bulletin}\r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.bulletin}`}\r\n        />\r\n        {/* <DocumentCard\r\n          type={IDocumentsTypes.protocol}          \r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.protocol}`}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal, Select } from \"antd\";\r\nimport { ICompany } from \"entities/company/types\";\r\nimport { IQuestion } from \"entities/meeting/types\";\r\nimport { IMember, MemberTypeEnum } from \"entities/member/types\";\r\nimport { useCallback } from \"react\";\r\nimport { IAnswer, RESULT_TYPES } from \"./types\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(\r\n  ({\r\n    company,\r\n    questions,\r\n    members,\r\n    answer,\r\n    answers\r\n  }: {\r\n    company: ICompany;\r\n    questions: IQuestion[];\r\n    members: IMember[];\r\n    answer: IAnswer;\r\n    answers: any[];\r\n  }) => {\r\n    const modal = useModal();\r\n    const [form] = Form.useForm();\r\n\r\n    console.log('answer', answer)\r\n    console.log('answers', answers)\r\n\r\n    const answeredMembers = answers.map(answer => answer.member_id)\r\n    const currentMembers = members.filter(member => member.type.includes(MemberTypeEnum.owner) && !answeredMembers.includes(member.id))\r\n\r\n    const handleSubmit = useCallback(() => {\r\n      form.validateFields().then(() => {\r\n        const values = { ...form.getFieldsValue() };\r\n        const answers = Object.keys(values).filter(item => item !== 'member_id').map(filterItem => ({question_id: +filterItem, member_id: values.member_id, result: values[filterItem]}))\r\n        modal.resolve(answers);\r\n        modal.hide();\r\n      });\r\n    }, [\r\n      modal,\r\n      // user,\r\n      form,\r\n    ]);\r\n    return (\r\n      <Modal\r\n        {...antdModal(modal)}\r\n        title=\"Добавить ответ\"\r\n        //   okText={user ? \"Update\" : \"Create\"}\r\n        okText=\"Сохранить\"\r\n        cancelText=\"Отмена\"\r\n        onOk={handleSubmit}\r\n      >\r\n        <Form form={form} layout=\"vertical\" initialValues={answer}>\r\n          <Form.Item\r\n            name=\"member_id\"\r\n            label=\"Участник\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input the title of collection!\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              // defaultValue={[\"a10\", \"c12\"]}\r\n              // onChange={handleChange}\r\n            >\r\n              {currentMembers.map((member) => (\r\n                <Option\r\n                  key={member.id}\r\n                  value={member.id}\r\n                >{`${member.sirname} ${member.firstname} ${member.lastname}`}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {questions.map((question) => {\r\n            return (\r\n              <Form.Item\r\n                key={question.index}\r\n                name={question.id}\r\n                label={`Вопрос №${question.index}. ${question.solution}`}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Please input the title of collection!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  allowClear\r\n                  style={{ width: \"100%\" }}\r\n                  // onChange={handleChange}\r\n                >\r\n                  {Object.keys(RESULT_TYPES).map((item, index) => (\r\n                    <Option key={index} value={item}>{RESULT_TYPES[item]}</Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            );\r\n          })}\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  }\r\n);\r\n","import { Button, Card } from \"antd\";\r\nimport { FC, useCallback, useState } from \"react\";\r\nimport AnswerForm from \"entities/answer/form\";\r\nimport { useModal } from \"@ebay/nice-modal-react\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IAnswer, RESULT_TYPES } from \"entities/answer/types\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\n\r\ninterface IProps {\r\n  questions: IQuestion[];\r\n  meetingId: string;\r\n  members: IMember[];\r\n  meeting: IMeeting;\r\n}\r\n\r\nconst groupAnswersByMembers = (answers: IAnswer[], property: keyof IAnswer) => {\r\n  return answers.reduce((acc: {[key: string]: any[]}, obj) => {\r\n    // const key = obj['member_id'];\r\n    const key = obj[property];\r\n    if (!acc[key]) {\r\n       acc[key as keyof typeof acc] = [];\r\n    }\r\n    acc[key as keyof typeof acc].push(obj);\r\n    return acc;\r\n }, {}); \r\n}\r\n\r\nexport const AnswersBlock: FC<IProps> = ({ meeting, meetingId, members, questions }) => {\r\n  const userModal = useModal(AnswerForm);\r\n  const addAnswer = useStore(state => state.addAnswer)\r\n\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show({ questions, members, answers: meeting.answers }).then((newItem: any) => {\r\n      addAnswer(newItem)\r\n      // setItems([newItem, ...items]);\r\n      // addQuestion(newItem, meetingId)\r\n    });\r\n  }, [userModal, meeting.questions]);\r\n\r\n  const handleChangeItem = useCallback((answer: any) => {\r\n    userModal.show({ answer }).then((newMember: any) => {\r\n      // addMember({ ...newMember, company_id });\r\n    });\r\n  }, [userModal, questions]);\r\n\r\n  const currentAnswersByMember = groupAnswersByMembers(meeting.answers, 'member_id')\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить ответ\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {\r\n          Object.keys(currentAnswersByMember).map((item) => {\r\n              console.log(\"🚀 ~ file: index.tsx ~ line 60 ~ Object.keys ~ item\", item)\r\n              const member = members.find(member => member.id === +item)\r\n              return <Card hoverable title={`${member?.sirname} ${member?.firstname} ${member?.lastname}, ${member?.part}%`} key={member?.id} onClick={() => handleChangeItem(item)}>\r\n                {\r\n                  currentAnswersByMember[item].map(answer => {\r\n                    const question = meeting.questions.find(question => question.id === answer.question_id)\r\n                    return <div key={answer.id}>\r\n                      {question?.solution} - <span>{RESULT_TYPES[answer.result]}</span>\r\n                    </div>\r\n                  })\r\n                }\r\n              </Card>            \r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport {\r\n  Packer,\r\n  Document,\r\n  Paragraph,\r\n  TextRun,\r\n  AlignmentType,\r\n  HeadingLevel,\r\n  TabStopType,\r\n  TabStopPosition,\r\n} from \"docx\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { NotificationDoc } from \"entities/documents/notification\";\r\nimport { Bulletin } from \"entities/documents/bulletin\";\r\nimport { DocumentCard } from \"entities/documents/DocumentCard\";\r\nimport { IDocumentsTypes } from \"entities/documents/types\";\r\nimport { ICompanyFull } from \"entities/company/types\";\r\nimport { ProtocolDoc } from \"entities/documents/protocol\";\r\nimport { RESULT_TYPES } from \"entities/answer/types\";\r\nimport { baseURL } from \"shared/config/api\";\r\n\r\ninterface IProps {\r\n  meeting: IMeeting;\r\n  company: ICompanyFull;\r\n}\r\n\r\n\r\nexport const MeetingBlock: FC<IProps> = ({ meeting, company }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"cards\">\r\n        <DocumentCard\r\n          type={IDocumentsTypes.protocol}          \r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.protocol}`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Breadcrumb, Tabs } from \"antd\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { QuestionsBlock } from \"./blocks/questionsBlock\";\r\nimport { InfoBlock } from \"./blocks/infoBlock\";\r\nimport \"./index.scss\";\r\nimport { useStore } from \"entities/store\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { DocumentsBlock } from \"./blocks/documents\";\r\nimport { AnswersBlock } from \"./blocks/answersBlock\";\r\nimport { MeetingBlock } from \"./blocks/meetingBlock\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst MeetingDetailsPage: FC = () => {\r\n  const { id } = useParams();\r\n\r\n  const { company, meeting, getMeeting, getGatalog } = useStore((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getMeeting(id);\r\n      getGatalog('question_type')\r\n    }\r\n  }, [id]);\r\n\r\n  if (!meeting) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>\r\n          <a href=\"/\">Главная</a>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <a href=\"/companies\">Компании</a>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <a href={\"/companies/\" + company?.id}>{company?.requisites.name}</a>\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"header\">\r\n        <h1>Собрание: {meeting.info.name}</h1>\r\n      </div>\r\n      <Tabs\r\n        defaultActiveKey=\"1\"\r\n        //   onChange={onChange}\r\n      >\r\n        <TabPane tab=\"Информация\" key=\"1\">\r\n          <InfoBlock requisites={meeting.info}/>\r\n        </TabPane>\r\n        <TabPane tab=\"Повестка\" key=\"2\">\r\n          <QuestionsBlock\r\n            questions={meeting.questions!}\r\n            meeting_id={meeting.id}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Документы\" key=\"3\">\r\n          <DocumentsBlock meeting={meeting} company={company} />\r\n        </TabPane>\r\n        <TabPane tab=\"Голосование\" key=\"4\">\r\n          <AnswersBlock questions={meeting.questions!} meetingId={meeting.id} members={company.members} meeting={meeting} />\r\n        </TabPane>\r\n        <TabPane tab=\"Собрание\" key=\"5\">\r\n          <MeetingBlock meeting={meeting} company={company}/>\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeetingDetailsPage;\r\n","import axios from \"axios\";\r\n\r\n// export const baseURL = \"http://localhost:5022/api\"\r\nexport const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["MeetingTypeOfСauseEnum","MeetingTypeEnum","MEETING_TYPES_OF_CAUSE","year","extra","MEETING_TYPES","ochno","zaochno","ochnozaochno","MemberTypeEnum","MEMBER_TYPES","en","director","ru","owner","MEMBERS_TYPES","employee","API_COMPANIES","api","response","data","API_COMPANY","id","API_MEETING","company_id","name","API_QUESTIONS","API_ANSWERS","API_CATALOGS","type","useStore","create","set","companies","company","requisites","inn","kpp","address","members","meetings","getCompanies","addCompany","newCompany","state","getCompany","addMember","meeting","info","questions","answers","getMeeting","date_of_meeting","moment","dateWithTimeGetFormat","date_of_registration","addMeeting","changeMeetingInfo","meetingInfo","addQuesion","addAnswer","catalogs","getGatalog","dateWithTimeShowFormat","IDocumentsTypes","TextArea","Input","Option","Upload","Select","NiceModal","question","modal","useModal","Form","form","question_type","handleSubmit","useCallback","validateFields","then","newQuestion","getFieldsValue","resolve","hide","antdModal","title","onOk","layout","initialValues","label","rules","required","message","allowClear","style","width","onChange","value","nameOfQuestionType","find","setFieldsValue","map","item","rows","QuestionsBlock","meeting_id","console","log","userModal","QuestionForm","addQuestion","handleNewItem","show","newItem","handleChangeItem","newMember","onClick","className","hoverable","styles","solution","description","InfoBlock","useState","isActiveForm","setIsActiveForm","onFinish","values","disabled","Object","keys","placeholder","showTime","format","minuteStep","showNow","showSecond","dateMinusSeveralHours","subtract","htmlType","address_of_meeting","ResultsTypes","DOCUMENT_TYPES","bulletin","notification","protocol","DocumentCard","link","href","download","DocumentsBlock","length","baseURL","RESULT_TYPES","yes","no","refrain","answer","answeredMembers","member_id","currentMembers","filter","member","includes","filterItem","question_id","result","okText","cancelText","sirname","firstname","lastname","index","AnswersBlock","property","meetingId","AnswerForm","currentAnswersByMember","reduce","acc","obj","key","push","part","MeetingBlock","TabPane","Tabs","useParams","useEffect","defaultActiveKey","tab","axios","headers"],"sourceRoot":""}