{"version":3,"file":"static/js/612.5221d3d5.chunk.js","mappings":"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","sources":["entities/meeting/types.ts","entities/member/types.ts","entities/documents/types.ts","entities/meeting/question.tsx","webpack://legal/./src/pages/meetingDetails/blocks/questionsBlock/styles.module.scss?0616","pages/meetingDetails/blocks/questionsBlock/index.tsx","pages/meetingDetails/blocks/infoBlock/index.tsx","entities/answer/types.ts","entities/documents/DocumentCard.tsx","pages/meetingDetails/blocks/documents/index.tsx","shared/utils/functions.ts","entities/answer/form.tsx","entities/answer/utils.ts","pages/meetingDetails/blocks/answersBlock/index.tsx","pages/meetingDetails/blocks/meetingBlock/index.tsx","pages/meetingDetails/index.tsx"],"sourcesContent":["import { IAnswer } from \"entities/answer/types\";\r\nimport { Moment } from \"moment\";\r\n\r\nexport interface IQuestion {\r\n  id: number;\r\n  index: number;\r\n  name: string;\r\n  solution: string;\r\n  description: string;\r\n  decision: string;\r\n}\r\n\r\nexport interface IMeeting {\r\n  id: string;\r\n  name: string;\r\n  info: {\r\n    name: string;\r\n    date_of_meeting?: Moment;\r\n    date_of_registration?: Moment;\r\n    date_of_start?: Moment;\r\n    date_of_finish?: Moment;\r\n    address_of_meeting?: string;\r\n    type?: MeetingTypeEnum;\r\n    type_of_cause?: MeetingTypeOfСauseEnum;\r\n    company_id?: string;\r\n  };\r\n  questions: IQuestion[];\r\n  // dateOfMeeting?: Date;\r\n  // addressOfMeeting?: string;\r\n  // type?: MeetingTypeEnum;\r\n  // typeOfСause?: MeetingTypeOfСauseEnum;\r\n  answers: IAnswer[];\r\n}\r\n\r\nexport enum MeetingTypeOfСauseEnum {\r\n  year = \"year\",\r\n  extra = \"extra\",\r\n}\r\n\r\nexport const MEETING_TYPES_OF_CAUSE: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeOfСauseEnum.year]: \"годовое\",\r\n  [MeetingTypeOfСauseEnum.extra]: \"внеочередное\",\r\n};\r\n\r\nexport enum MeetingTypeEnum {\r\n  ochno = \"ochno\",\r\n  // zaochno = \"zaochno\",\r\n  // ochnozaochno = \"ochnozaochno\",\r\n}\r\n\r\nexport const MEETING_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeEnum.ochno]: \"очное\",\r\n  // [MeetingTypeEnum.zaochno]: \"заочное\",\r\n  // [MeetingTypeEnum.ochnozaochno]: \"очная-заочное\",\r\n};\r\n\r\nexport interface IQuestionType {\r\n  id: number;\r\n  name: string;\r\n  law?: string;\r\n  description: string;\r\n}","export interface IMember {\r\n  id?: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  sirname: string;\r\n  passport: string;\r\n  type: MemberTypeEnum[];\r\n  part?: number;\r\n  form: MemberFormEnum;\r\n  inn?: string;\r\n  company_name?: string;\r\n  ogrn?: string;\r\n  base?: string;\r\n}\r\n\r\nexport enum MemberFormEnum {\r\n  legal = \"legal\",\r\n  man = \"man\",\r\n}\r\n\r\nexport const MEMBERS_FORMS: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberFormEnum.legal]: \"Юридическое лицо\",\r\n  [MemberFormEnum.man]: \"Физическое лицо\",\r\n};\r\n\r\nexport enum MemberTypeEnum {\r\n  owner = \"owner\",\r\n  director = \"director\",\r\n  employee = \"employee\",\r\n}\r\n\r\nexport const MEMBER_TYPES = [\r\n  {\r\n    en: MemberTypeEnum.director,\r\n    ru: \"единоличный исполнительный орган\",\r\n  },\r\n  {\r\n    en: MemberTypeEnum.owner,\r\n    ru: \"участник\",\r\n  },\r\n];\r\n\r\nexport const MEMBERS_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberTypeEnum.director]: \"директор\",\r\n  [MemberTypeEnum.owner]: \"собственник\",\r\n  [MemberTypeEnum.employee]: \"сотрудник\",\r\n};\r\n","export enum IDocumentsTypes {\r\n    bulletin = 'bulletin',\r\n    notification = 'notification',\r\n    protocol = 'protocol'\r\n}\r\n\r\nexport const DOCUMENT_TYPES = {\r\n    [IDocumentsTypes.bulletin]: 'Бюллетень',\r\n    [IDocumentsTypes.notification]: 'Уведомление о созыве и проведении общего собрания участников',\r\n    [IDocumentsTypes.protocol]: 'Протокол',\r\n}","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal, Select, Upload } from \"antd\";\r\nimport { useStore } from \"entities/store\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { IQuestion, IQuestionType } from \"./types\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Dragger } = Upload;\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(({ question }: { question: IQuestion }) => {\r\n  console.log(\"🚀 ~ file: question.tsx ~ line 11 ~ NiceModal.create ~ tip\", question)\r\n\r\n  const [tip, setTip] = useState<IQuestionType | null>(null);\r\n  console.log(\"🚀 ~ file: question.tsx ~ line 13 ~ NiceModal.create ~ tip\", tip)\r\n\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n  const { question_type } = useStore((state) => state.catalogs);\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newQuestion = { ...form.getFieldsValue() };\r\n      modal.resolve(newQuestion);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n\r\n  const onTypeQuestionChange = (value: any) => {\r\n    const nameOfQuestionType = question_type.find(\r\n      (question: any) => question.id === value\r\n    );\r\n    console.log(\r\n      \"🚀 ~ file: question.tsx ~ line 36 ~ onTypeQuestionChange ~ nameOfQuestionType\",\r\n      nameOfQuestionType\r\n    );\r\n    setTip(nameOfQuestionType)\r\n    form.setFieldsValue({ name: nameOfQuestionType.name });\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Вопрос повестки\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      onOk={handleSubmit}\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n    >\r\n      <Form \r\n      form={form} \r\n      layout=\"vertical\"\r\n       initialValues={question} \r\n\r\n       >\r\n        <Form.Item\r\n          name=\"question_type_id\"\r\n          label=\"Тип вопроса\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Необходимо заполнить данное поле\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            onChange={onTypeQuestionChange}\r\n            showSearch\r\n            filterOption={(input, option) =>\r\n              (option!.children as unknown as string)\r\n                .toLowerCase()\r\n                .includes(input.toLowerCase())\r\n            }\r\n          >\r\n            {question_type.map((item: any) => (\r\n              <Option key={item.id} value={item.id}>\r\n                {item.name}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Вопрос\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Необходимо заполнить данное поле\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"solution\"\r\n          label=\"Предложенное решение\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Необходимо заполнить данное поле\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"description\"\r\n          label=\"Пояснения\"\r\n          rules={[\r\n            {\r\n              // required: true,\r\n              message: \"Необходимо заполнить данное поле\",\r\n            },\r\n          ]}\r\n        >\r\n          <TextArea rows={8} />\r\n        </Form.Item>\r\n\r\n        {/* <Form.Item\r\n          name=\"files\"\r\n          label=\"Дополнительные файлы\"\r\n\r\n        >\r\n          <Dragger \r\n          >\r\n            <p className=\"ant-upload-drag-icon\">\r\n            </p>\r\n            <p className=\"ant-upload-text\">\r\n              Загрузите необходимые документы\r\n            </p>\r\n            <p className=\"ant-upload-hint\">\r\n              Перенесите нужные файлы или нажмите на эту кнопку\r\n            </p>\r\n          </Dragger>\r\n        </Form.Item> */}\r\n      </Form>\r\n      <div>{tip?.description}</div>\r\n    </Modal>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"question_block\":\"styles_question_block__kL+9e\",\"question_block_heading\":\"styles_question_block_heading__US8BW\"};","import { Button, Card } from \"antd\";\r\nimport { FC, useCallback } from \"react\";\r\nimport { useModal } from \"@ebay/nice-modal-react\";\r\n\r\nimport QuestionForm from \"entities/meeting/question\";\r\nimport { IQuestion } from \"entities/meeting/types\";\r\nimport styles from \"./styles.module.scss\";\r\nimport { useStore } from \"entities/store\";\r\n\r\ninterface IProps {\r\n  questions: IQuestion[];\r\n  meeting_id: string;\r\n}\r\n\r\nexport const QuestionsBlock: FC<IProps> = ({ questions, meeting_id }) => {\r\n\r\n  const userModal = useModal(QuestionForm);\r\n  const { addQuestion, changeQuestion } = useStore((state) => state);\r\n  // const [items, setItems] = useState<any[]>([]);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newItem: any) => {\r\n      // setItems([newItem, ...items]);\r\n      addQuestion({ ...newItem, meeting_id });\r\n    });\r\n  }, [userModal, questions]);\r\n\r\n  const handleChangeItem = useCallback(\r\n    (question: any) => {\r\n      userModal.show({ question }).then((newMember: any) => {\r\n        changeQuestion({...newMember, id: question.id})\r\n      });\r\n    },\r\n    [userModal, questions]\r\n  );\r\n\r\n  // const { items, handleNewItem } = useItems<IQuestion>(QuestionForm);\r\n  // console.log(\"🚀 ~ file: index.tsx ~ line 28 ~ items\", items);\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить вопрос\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {questions.map((item) => {\r\n          return (\r\n            <Card\r\n              hoverable\r\n              title={item.name}\r\n              key={item.id}\r\n              onClick={() => handleChangeItem(item)}\r\n            >\r\n              <div className={styles.question_block}>\r\n                <div className={styles.question_block_heading}>Решение</div>\r\n                <div>{item.solution}</div>\r\n              </div>\r\n              <div className={styles.question_block}>\r\n                <div className={styles.question_block_heading}>Пояснения</div>\r\n                <div>{item.description}</div>\r\n              </div>\r\n              <div className={styles.question_block}>\r\n                <div className={styles.question_block_heading}>\r\n                  Необходимое количество голосов\r\n                </div>\r\n                <div>{item.decision}</div>\r\n              </div>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport { Button, DatePicker, Form, Input, Select } from \"antd\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport moment from \"moment\";\r\n\r\nimport { MEETING_TYPES, MEETING_TYPES_OF_CAUSE } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { dateWithTimeFormat, getStringDate } from \"features/dates\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  requisites: any;\r\n}\r\n\r\nexport const InfoBlock: FC<IProps> = ({ requisites }) => {\r\n  const [isActiveForm, setIsActiveForm] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  const {\r\n    changeMeetingInfo,\r\n    company: {\r\n      requisites: { address },\r\n    },\r\n  } = useStore((state) => state);\r\n\r\n  const submitHandler = (values: any) => {\r\n    changeMeetingInfo({ ...values, meeting_id: requisites.id });\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  const activeHandler = () => {\r\n    if (!requisites.address_of_meeting) {\r\n      form.setFieldsValue({ address_of_meeting: address });\r\n    }\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  const onDateOfMeetingChange = (value: any) => {\r\n    const stringDateOfMeeting = getStringDate(value);\r\n    value.subtract(1, \"hours\");\r\n    form.setFieldsValue({\r\n      date_of_registration: value,\r\n      date_of_meeting: moment(stringDateOfMeeting, dateWithTimeFormat),\r\n    });\r\n  };\r\n\r\n  // const onAddressClick = () => {\r\n  //   // console.log(address);\r\n  //   form.setFieldsValue({ address_of_meeting: \"dddd\" });\r\n  //   // form.setFieldsValue({ address_of_meeting: address });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n\r\n  // },[])\r\n\r\n  const dates = \"23.08.2022 14:00\";\r\n\r\n  if (!requisites.id) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        layout=\"vertical\"\r\n        onFinish={submitHandler}\r\n        initialValues={requisites}\r\n        disabled={isActiveForm}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Условное название собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type_of_cause\"\r\n          label=\"Тип собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select allowClear style={{ width: \"100%\" }}>\r\n            {Object.keys(MEETING_TYPES_OF_CAUSE).map((type) => (\r\n              <Option key={type}>{MEETING_TYPES_OF_CAUSE[type]}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type\"\r\n          label=\"Форма проведения\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            // onChange={handleChange}\r\n          >\r\n            {Object.keys(MEETING_TYPES).map((type) => (\r\n              <Option key={type} value={type}>\r\n                {MEETING_TYPES[type]}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"date_of_meeting\"\r\n          label=\"Дата и время проведения собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <DatePicker\r\n            placeholder=\"\"\r\n            showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n            showNow={false}\r\n            showSecond={false}\r\n            format={dateWithTimeFormat}\r\n            onChange={onDateOfMeetingChange}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_of_registration\"\r\n          label=\"Дата и время начала регистрации участников\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <DatePicker\r\n            placeholder=\"\"\r\n            showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n            showNow={false}\r\n            showSecond={false}\r\n            format={dateWithTimeFormat}\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"address_of_meeting\"\r\n          label=\"Адрес проведения собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        {!isActiveForm && (\r\n          <Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              Сохранить\r\n            </Button>\r\n          </Form.Item>\r\n        )}\r\n      </Form>\r\n      {isActiveForm ? (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Изменить\r\n        </Button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n","\r\nenum ResultsTypes {\r\n    yes = 2,\r\n    no = 1,\r\n    refrain = 0\r\n}\r\n// enum ResultsTypes {\r\n//     yes = 'yes',\r\n//     no = 'no',\r\n//     refrain = 'refrain'\r\n// }\r\n\r\nexport const RESULT_TYPES: {\r\n    [index: string]: string;\r\n  } = {\r\n    [ResultsTypes.yes]: \"За\",\r\n    [ResultsTypes.no]: \"Против\",\r\n    [ResultsTypes.refrain]: \"Воздержался\",\r\n  }; \r\n\r\nexport interface IAnswer {\r\n    id: number;\r\n    question_id: string;\r\n    member_id: number;\r\n    result: ResultsTypes;\r\n}","import { Button, Card } from \"antd\";\r\nimport { createDocument, DOCUMENTS_TEMPLATES } from \"features/createDocument\";\r\nimport { FC, ReactNode, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DOCUMENT_TYPES, IDocumentsTypes } from \"./types\";\r\n\r\ninterface IProps {\r\n  type: IDocumentsTypes;\r\n  // Component: ReactNode;\r\n  link: string;\r\n}\r\n\r\nexport const DocumentCard: FC<IProps> = ({ type, link }) => {\r\n  const [isPreview, setIsPreview] = useState(false);\r\n\r\n  const previewHandler = () => {\r\n    setIsPreview(!isPreview);\r\n  };\r\n\r\n  return (\r\n    <Card title={DOCUMENT_TYPES[type]}>\r\n      <div>\r\n        <Button href={link} download type=\"link\">\r\n          Скачать\r\n        </Button>\r\n        <Button type=\"link\" onClick={previewHandler}>\r\n          <NavLink to={\"/templates/\" + type}>Редактировать</NavLink>\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n","import { FC } from \"react\";\r\nimport {\r\n  Packer,\r\n  Document,\r\n  Paragraph,\r\n  TextRun,\r\n  AlignmentType,\r\n  HeadingLevel,\r\n  TabStopType,\r\n  TabStopPosition,\r\n} from \"docx\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { NotificationDoc } from \"entities/documents/notification\";\r\nimport { Bulletin } from \"entities/documents/bulletin\";\r\nimport { DocumentCard } from \"entities/documents/DocumentCard\";\r\nimport { IDocumentsTypes } from \"entities/documents/types\";\r\nimport { ICompanyFull } from \"entities/company/types\";\r\nimport { ProtocolDoc } from \"entities/documents/protocol\";\r\nimport { RESULT_TYPES } from \"entities/answer/types\";\r\nimport { baseURL } from \"shared/config/api\";\r\nimport { Alert } from \"antd\";\r\n\r\ninterface IProps {\r\n  meeting: IMeeting;\r\n  company: ICompanyFull;\r\n}\r\n\r\nexport const DocumentsBlock: FC<IProps> = ({ meeting, company }) => {\r\n  console.log('meeting', meeting)\r\n  // const answeredMembersId = [\r\n  //   ...new Set(meeting.answers.map((answer) => answer.member_id)),\r\n  // ];\r\n  // const answeredMembers = company.members.filter((member) =>\r\n  //   answeredMembersId.includes(member.id!)\r\n  // );\r\n  // const quorum = answeredMembers.reduce((acc, cur) => acc + +cur.part!, 0);\r\n\r\n  // const answersResults = meeting.questions.map((question) => {\r\n  //   const answersForQuestion = meeting.answers.filter(\r\n  //     (answer) => +answer.question_id === question.id\r\n  //   );\r\n\r\n  //   const results = Object.values(RESULT_TYPES).map((item) => {\r\n  //     return {\r\n  //       type: item,\r\n  //       value: 1,\r\n  //     };\r\n  //   });\r\n\r\n  //   return {\r\n  //     ...question,\r\n  //     answers: answersForQuestion,\r\n  //     results: [],\r\n  //   };\r\n  // });\r\n  const { date_of_meeting, date_of_registration, type, type_of_cause, address_of_meeting } = meeting.info\r\n\r\n  if (!date_of_meeting || !date_of_registration ||  !type ||  !type_of_cause || !address_of_meeting) {\r\n    return (\r\n      <Alert\r\n        message=\"Не заполнена информация про собрание. Заполните все пункты на странице Информация.\"\r\n        type=\"warning\"\r\n      />\r\n    );\r\n  } else {\r\n    if (meeting.questions.length === 0) {\r\n      return (\r\n        <Alert\r\n          message=\"Нет повестки собрания для формирования документов. Добавьте, вопросы в повестку.\"\r\n          type=\"warning\"\r\n          // closable\r\n          // onClose={onClose}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"cards\">\r\n        <DocumentCard\r\n          type={IDocumentsTypes.notification}\r\n          // Component={<NotificationDoc meeting={meeting} company={company!} />}\r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.notification}`}\r\n        />\r\n        <DocumentCard\r\n          type={IDocumentsTypes.bulletin}\r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.bulletin}`}\r\n        />\r\n        {/* <DocumentCard\r\n          type={IDocumentsTypes.protocol}          \r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.protocol}`}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { IMember, MemberFormEnum } from \"entities/member/types\";\r\n\r\nexport const getFullNameFromMember = (member: IMember) => {\r\n    return member.form === MemberFormEnum.man ? `${member.sirname} ${member.firstname} ${member.lastname}` : `ООО ${member.company_name}`\r\n}","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal, Select } from \"antd\";\r\nimport { ICompany } from \"entities/company/types\";\r\nimport { IQuestion } from \"entities/meeting/types\";\r\nimport { IMember, MemberTypeEnum } from \"entities/member/types\";\r\nimport { useCallback } from \"react\";\r\nimport { getFullNameFromMember } from \"shared/utils/functions\";\r\nimport { IAnswer, RESULT_TYPES } from \"./types\";\r\nimport { getAnswersFromFormValues, getCurrentMembers } from \"./utils\";\r\n\r\nconst { Option } = Select;\r\n\r\ninterface IProps {\r\n  company: ICompany;\r\n  questions: IQuestion[];\r\n  members: IMember[];\r\n  answer: IAnswer;\r\n  answers: any[];\r\n}\r\n\r\nexport default NiceModal.create(\r\n  ({ company, questions, members, answer, answers }: IProps) => {\r\n    const modal = useModal();\r\n    const [form] = Form.useForm();\r\n\r\n    const currentMembers =\r\n      answer && answer.member_id\r\n        ? members.filter((member) => member.id === +answer.member_id)\r\n        : getCurrentMembers(members, answers);\r\n\r\n    const handleSubmit = useCallback(() => {\r\n      form.validateFields().then(() => {\r\n        const values = { ...form.getFieldsValue() };\r\n        console.log(\r\n          \"🚀 ~ file: form.tsx ~ line 30 ~ form.validateFields ~ values\",\r\n          values\r\n        );\r\n        const answers = getAnswersFromFormValues(values);\r\n        console.log(\r\n          \"🚀 ~ file: form.tsx ~ line 32 ~ form.validateFields ~ answers\",\r\n          answers\r\n        );\r\n        modal.resolve(answers);\r\n        modal.hide();\r\n      });\r\n    }, [\r\n      modal,\r\n      // user,\r\n\r\n      form,\r\n    ]);\r\n    return (\r\n      <Modal\r\n        {...antdModal(modal)}\r\n        title=\"Добавить ответ\"\r\n        okText=\"Сохранить\"\r\n        cancelText=\"Отмена\"\r\n        onOk={handleSubmit}\r\n      >\r\n        <Form form={form} layout=\"vertical\" initialValues={answer}>\r\n          <Form.Item\r\n            name=\"member_id\"\r\n            label=\"Участник\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Необходимо заполнить данное поле\",\r\n              },\r\n            ]}\r\n          >\r\n            <Select\r\n              allowClear\r\n              style={{ width: \"100%\" }}\r\n              // onChange={handleChange}\r\n            >\r\n              {currentMembers.map((member) => (\r\n                <Option key={member.id} value={member.id}>\r\n                  {getFullNameFromMember(member)}\r\n                </Option>\r\n                // >{`${member.sirname} ${member.firstname} ${member.lastname}`}</Option>\r\n              ))}\r\n            </Select>\r\n          </Form.Item>\r\n          {questions.map((question) => {\r\n            return (\r\n              <Form.Item\r\n                key={question.index}\r\n                name={question.id}\r\n                label={`Вопрос №${question.index}. ${question.solution}`}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"Необходимо заполнить данное поле\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Select\r\n                  allowClear\r\n                  style={{ width: \"100%\" }}\r\n                  // onChange={handleChange}\r\n                >\r\n                  {Object.keys(RESULT_TYPES).map((item, index) => (\r\n                    <Option key={index} value={item}>\r\n                      {RESULT_TYPES[item]}\r\n                    </Option>\r\n                  ))}\r\n                </Select>\r\n              </Form.Item>\r\n            );\r\n          })}\r\n        </Form>\r\n      </Modal>\r\n    );\r\n  }\r\n);\r\n","import { IMember, MemberTypeEnum } from \"entities/member/types\";\r\n\r\nexport const getAnswersFromFormValues = (values: any) => {\r\n  return Object.keys(values)\r\n    .filter((item) => item !== \"member_id\")\r\n    .map((filterItem) => ({\r\n      question_id: +filterItem,\r\n      member_id: values.member_id,\r\n      result: values[filterItem],\r\n    }));\r\n};\r\n\r\nexport const getCurrentMembers = (members: IMember[], answers: any[]) => {\r\n  console.log(\"🚀 ~ file: utils.ts ~ line 14 ~ getCurrentMembers ~ members\", members,answers )\r\n  const answeredMembers = answers.map((answer) => answer.member_id);\r\n  return members.filter(\r\n    (member) =>\r\n      member.type &&\r\n      member.type.includes(MemberTypeEnum.owner) &&\r\n      !answeredMembers.includes(member.id)\r\n  );\r\n};\r\n","import { Alert, Button, Card } from \"antd\";\r\nimport { FC, useCallback, useState } from \"react\";\r\nimport AnswerForm from \"entities/answer/form\";\r\nimport { useModal } from \"@ebay/nice-modal-react\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IAnswer, RESULT_TYPES } from \"entities/answer/types\";\r\nimport \"./index.scss\";\r\nimport { getFullNameFromMember } from \"shared/utils/functions\";\r\n\r\ninterface IProps {\r\n  questions: IQuestion[];\r\n  meetingId: string;\r\n  members: IMember[];\r\n  meeting: IMeeting;\r\n}\r\n\r\nconst groupAnswersByMembers = (answers: IAnswer[], property: keyof IAnswer) => {\r\n  return answers.reduce((acc: { [key: string]: any[] }, obj) => {\r\n    // const key = obj['member_id'];\r\n    const key = obj[property];\r\n    if (!acc[key]) {\r\n      acc[key as keyof typeof acc] = [];\r\n    }\r\n    acc[key as keyof typeof acc].push(obj);\r\n    return acc;\r\n  }, {});\r\n};\r\n\r\nconst getObjectFromAnswersByMember = (\r\n  answers: IAnswer[],\r\n  member_id: number\r\n) => {\r\n  const filteredAnswersByMember = answers.filter(\r\n    (answer) => answer.member_id === member_id\r\n  );\r\n  const result = filteredAnswersByMember.reduce((acc: any, cur) => {\r\n    acc[cur.question_id] = \"\" + cur.result;\r\n    return acc;\r\n  }, {});\r\n  return result;\r\n};\r\n\r\nexport const AnswersBlock: FC<IProps> = ({\r\n  meeting,\r\n  meetingId,\r\n  members,\r\n  questions,\r\n}) => {\r\n  const userModal = useModal(AnswerForm);\r\n  const { addAnswer, changeAnswer } = useStore((state) => state);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal\r\n      .show({ questions, members, answers: meeting.answers })\r\n      .then((newItem: any) => {\r\n        addAnswer(newItem);\r\n        // setItems([newItem, ...items]);\r\n        // addQuestion(newItem, meetingId)\r\n      });\r\n  }, [userModal, meeting.questions]);\r\n\r\n  const handleChangeItem = useCallback(\r\n    (changedItem: any) => {\r\n      const answersForForm = getObjectFromAnswersByMember(\r\n        meeting.answers,\r\n        changedItem.member_id\r\n      );\r\n      const answer = { ...changedItem, ...answersForForm };\r\n      userModal\r\n        .show({ answer, members, questions, answers: meeting.answers })\r\n        .then((newMember: any) => {\r\n          changeAnswer(newMember);\r\n        });\r\n    },\r\n    [userModal, questions]\r\n  );\r\n\r\n  const currentAnswersByMember = groupAnswersByMembers(\r\n    meeting.answers,\r\n    \"member_id\"\r\n  );\r\n\r\n  if (meeting.questions.length === 0) {\r\n    return (\r\n      <Alert\r\n        message=\"Не созданы вопросы повестки дня. Добавьте вопросы повестки дня.\"\r\n        type=\"warning\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить ответ\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {Object.keys(currentAnswersByMember).map((item) => {\r\n          const member = members.find((member) => member.id === +item);\r\n          return (\r\n            <Card\r\n              hoverable\r\n              title={`${member && getFullNameFromMember(member)}, ${member?.part}%`}\r\n              // title={`${member?.sirname} ${member?.firstname} ${member?.lastname}, ${member?.part}%`}\r\n              key={member?.id}\r\n              onClick={() => handleChangeItem({ member_id: +item })}\r\n            >\r\n              {currentAnswersByMember[item].map((answer) => {\r\n                const question = meeting.questions.find(\r\n                  (question) => question.id === answer.question_id\r\n                );\r\n                return (\r\n                  <div key={answer.id}>\r\n                    {question?.solution} -{\" \"}\r\n                    <span className={\"result-\" + answer.result}>\r\n                      {RESULT_TYPES[answer.result]}\r\n                    </span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useState } from \"react\";\r\nimport { Alert, Button, DatePicker, Form } from \"antd\";\r\n\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { DocumentCard } from \"entities/documents/DocumentCard\";\r\nimport { IDocumentsTypes } from \"entities/documents/types\";\r\nimport { ICompanyFull } from \"entities/company/types\";\r\nimport { baseURL } from \"shared/config/api\";\r\nimport { dateWithTimeFormat } from \"features/dates\";\r\nimport { useStore } from \"entities/store\";\r\n\r\ninterface IProps {\r\n  meeting: IMeeting;\r\n  company: ICompanyFull;\r\n}\r\n\r\nexport const MeetingBlock: FC<IProps> = ({ meeting, company }) => {\r\n  const [isActiveForm, setIsActiveForm] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  const { changeMeetingFactInfo } = useStore((state) => state);\r\n\r\n  const {\r\n    date_of_meeting,\r\n    date_of_registration,\r\n    type,\r\n    type_of_cause,\r\n    address_of_meeting,\r\n  } = meeting.info;\r\n\r\n  const submitHandler = (values: any) => {\r\n    changeMeetingFactInfo({ ...values, meeting_id: meeting.id });\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  const activeHandler = () => {\r\n    // if (!requisites.address_of_meeting) {\r\n    //   form.setFieldsValue({ address_of_meeting: address });\r\n    // }\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  if (\r\n    !date_of_meeting ||\r\n    !date_of_registration ||\r\n    !type ||\r\n    !type_of_cause ||\r\n    !address_of_meeting\r\n  ) {\r\n    return (\r\n      <Alert\r\n        message=\"Не заполнена информация про собрание. Заполните все пункты на странице Информация.\"\r\n        type=\"warning\"\r\n      />\r\n    );\r\n  } else {\r\n    if (meeting.answers.length === 0) {\r\n      return (\r\n        <Alert\r\n          message=\"Еще не пройдено голосование для создания протокола. Добавьте ответы в голосование.\"\r\n          type=\"warning\"\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          onFinish={submitHandler}\r\n          initialValues={meeting.info}\r\n          disabled={isActiveForm}\r\n        >\r\n          <Form.Item\r\n            name=\"date_of_start\"\r\n            label=\"Фактическое время начала собрания\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input the title of collection!\",\r\n              },\r\n            ]}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"\"\r\n              showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n              showNow={false}\r\n              showSecond={false}\r\n              format={dateWithTimeFormat}\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"date_of_finish\"\r\n            label=\"Фактическое время окончания собрания\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input the title of collection!\",\r\n              },\r\n            ]}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"\"\r\n              showTime={{ format: \"HH:mm\", minuteStep: 10 }}\r\n              showNow={false}\r\n              showSecond={false}\r\n              format={dateWithTimeFormat}\r\n            />\r\n          </Form.Item>\r\n          {!isActiveForm && (\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Сохранить\r\n              </Button>\r\n            </Form.Item>\r\n          )}\r\n        </Form>\r\n        {isActiveForm ? (\r\n          <Button type=\"primary\" onClick={activeHandler}>\r\n            Изменить\r\n          </Button>\r\n        ) : null}\r\n      </div>\r\n      <div className=\"cards\">\r\n        <DocumentCard\r\n          type={IDocumentsTypes.protocol}\r\n          link={`${baseURL}/documents/${meeting.id}/${IDocumentsTypes.protocol}`}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction changeMeetingInfo(arg0: any) {\r\n  throw new Error(\"Function not implemented.\");\r\n}\r\n","import { Breadcrumb, Tabs } from \"antd\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\n\r\nimport { useStore } from \"entities/store\";\r\n\r\nimport { QuestionsBlock } from \"./blocks/questionsBlock\";\r\nimport { InfoBlock } from \"./blocks/infoBlock\";\r\nimport { DocumentsBlock } from \"./blocks/documents\";\r\nimport { AnswersBlock } from \"./blocks/answersBlock\";\r\nimport { MeetingBlock } from \"./blocks/meetingBlock\";\r\n\r\nimport \"./index.scss\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst MeetingDetailsPage: FC = () => {\r\n  const { id } = useParams();\r\n\r\n  const { company, meeting, getMeeting, getGatalog, getCompany } = useStore(\r\n    (state) => state\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getMeeting(id);\r\n      getGatalog(\"question_type\");\r\n    }\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    if (!company.id && meeting.info.company_id) {\r\n      getCompany(meeting.info.company_id!);\r\n    }\r\n  }, [meeting]);\r\n\r\n  if (!meeting) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>\r\n          <NavLink to=\"/companies\">Главная</NavLink>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <NavLink to=\"/companies\">Компании</NavLink>\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <NavLink to={\"/companies/\" + company?.id}>\r\n            {company?.requisites.name}\r\n          </NavLink>\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"header\">\r\n        <h1>Собрание: {meeting.info.name}</h1>\r\n      </div>\r\n      <Tabs defaultActiveKey=\"1\">\r\n        <TabPane tab=\"Информация\" key=\"1\">\r\n          <InfoBlock requisites={meeting.info} />\r\n        </TabPane>\r\n        <TabPane tab=\"Повестка\" key=\"2\">\r\n          <QuestionsBlock\r\n            questions={meeting.questions!}\r\n            meeting_id={meeting.id}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Документы\" key=\"3\">\r\n          <DocumentsBlock meeting={meeting} company={company} />\r\n        </TabPane>\r\n        <TabPane tab=\"Голосование\" key=\"4\">\r\n          <AnswersBlock\r\n            questions={meeting.questions!}\r\n            meetingId={meeting.id}\r\n            members={company.members}\r\n            meeting={meeting}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Собрание\" key=\"5\">\r\n          <MeetingBlock meeting={meeting} company={company} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeetingDetailsPage;\r\n"],"names":["MeetingTypeOfСauseEnum","MeetingTypeEnum","MEETING_TYPES_OF_CAUSE","year","extra","MEETING_TYPES","ochno","MemberFormEnum","MemberTypeEnum","MEMBERS_FORMS","legal","man","director","owner","MEMBERS_TYPES","employee","IDocumentsTypes","TextArea","Input","Option","Upload","Select","NiceModal","question","console","log","useState","tip","setTip","modal","useModal","Form","form","question_type","useStore","state","catalogs","handleSubmit","useCallback","validateFields","then","newQuestion","getFieldsValue","resolve","hide","antdModal","title","onOk","okText","cancelText","layout","initialValues","name","label","rules","required","message","allowClear","style","width","onChange","value","nameOfQuestionType","find","id","setFieldsValue","showSearch","filterOption","input","option","children","toLowerCase","includes","map","item","rows","description","QuestionsBlock","questions","meeting_id","userModal","QuestionForm","addQuestion","changeQuestion","handleNewItem","show","newItem","handleChangeItem","newMember","type","onClick","className","hoverable","styles","solution","decision","InfoBlock","requisites","isActiveForm","setIsActiveForm","changeMeetingInfo","address","company","onFinish","values","disabled","Object","keys","placeholder","showTime","format","minuteStep","showNow","showSecond","dateWithTimeFormat","stringDateOfMeeting","getStringDate","subtract","date_of_registration","date_of_meeting","moment","htmlType","address_of_meeting","ResultsTypes","DOCUMENT_TYPES","bulletin","notification","protocol","DocumentCard","link","isPreview","setIsPreview","href","download","to","DocumentsBlock","meeting","info","type_of_cause","length","baseURL","getFullNameFromMember","member","sirname","firstname","lastname","company_name","RESULT_TYPES","yes","no","refrain","members","answer","answers","currentMembers","member_id","filter","answeredMembers","getCurrentMembers","filterItem","question_id","result","getAnswersFromFormValues","index","AnswersBlock","property","meetingId","AnswerForm","addAnswer","changeAnswer","changedItem","answersForForm","reduce","acc","cur","currentAnswersByMember","obj","key","push","part","MeetingBlock","changeMeetingFactInfo","TabPane","Tabs","useParams","getMeeting","getGatalog","getCompany","useEffect","company_id","defaultActiveKey","tab"],"sourceRoot":""}