{"version":3,"file":"static/js/771.5ff5d5f1.chunk.js","mappings":"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","sources":["pages/companies/api-companies.ts","pages/companyDetails/api-company.ts","pages/meetingDetails/api-meeting.ts","pages/meetingDetails/blocks/questionsBlock/api-questions.ts","pages/meetingDetails/blocks/answersBlock/api-answers.ts","shared/api/api-catalogs.ts","entities/store/index.ts","features/dates.ts","features/dadata.ts","entities/company/form.tsx","pages/companies/index.tsx","shared/config/api.ts"],"sourcesContent":["import { ICompany } from \"entities/company/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANIES = {\r\n  async getAll() {\r\n    const { data: response } = await api.get<ICompany[]>(\"/companies\");\r\n    return response;\r\n  },\r\n  async add(data: ICompany) {\r\n    const { data: response } = await api.post<ICompany>(\"/companies\", data);\r\n    return response;\r\n  },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANY = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<ICompanyFull>(\"/companies/\" + id);\r\n    return response;\r\n  },\r\n  async addMember(data: IMember) {\r\n    const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n    return response;\r\n  },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_MEETING = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n    return response;\r\n  },\r\n  async add(company_id: string, name: string) {\r\n    const { data: response } = await api.post<IMeeting>(\"/meetings/\", {\r\n      company_id,\r\n      name,\r\n    });\r\n    return response;\r\n  },\r\n  async changeInfo(data: IMeeting) {\r\n    const { data: response } = await api.put<any>(\"/meetings/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_QUESTIONS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IQuestion) {\r\n    const { data: response } = await api.post<IQuestion>(\"/questions/\", data);\r\n    return response;\r\n  },\r\n  async getQuestionTypes() {\r\n    const { data: response } = await api.get<any>(\"/catalogs/question_type\");\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_ANSWERS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IAnswer[]) {\r\n    const { data: response } = await api.post<any>(\"/answers/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_CATALOGS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/catalogs/\" + type);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import create from \"zustand\";\r\nimport moment from \"moment\";\r\n\r\nimport { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { API_COMPANIES } from \"pages/companies/api-companies\";\r\nimport { API_COMPANY } from \"pages/companyDetails/api-company\";\r\nimport { API_MEETING } from \"pages/meetingDetails/api-meeting\";\r\nimport { API_QUESTIONS } from \"pages/meetingDetails/blocks/questionsBlock/api-questions\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { API_ANSWERS } from \"pages/meetingDetails/blocks/answersBlock/api-answers\";\r\nimport { dateWithTimeGetFormat } from \"features/dates\";\r\nimport { API_CATALOGS } from \"shared/api/api-catalogs\";\r\n\r\ninterface CompanyState {\r\n  companies: ICompany[];\r\n  getCompanies: () => void;\r\n  addCompany: (newCompany: ICompany) => void;\r\n  company: ICompanyFull;\r\n  getCompany: (id: string) => void;\r\n  addMember: (data: IMember) => void;\r\n  meeting: IMeeting;\r\n  getMeeting: (id: string) => void;\r\n  addMeeting: (company_id: string, name: string) => void;\r\n  changeMeetingInfo: (meetingInfo: any) => void;\r\n  addQuesion: (data: IQuestion) => void;\r\n  addAnswer: (data: IAnswer[]) => void;\r\n  catalogs: any;\r\n  getGatalog: (type: string) => void;\r\n}\r\n\r\nexport const useStore = create<CompanyState>()((set) => ({\r\n  companies: [],\r\n  company: {\r\n    id: \"\",\r\n    requisites: { name: \"\", inn: \"\", kpp: \"\", address: \"\" },\r\n    members: [],\r\n    meetings: [],\r\n  },\r\n  getCompanies: async () => {\r\n    const response = await API_COMPANIES.getAll();\r\n    set({ companies: response });\r\n  },\r\n  addCompany: async (newCompany) => {\r\n    const response = await API_COMPANIES.add(newCompany);\r\n    set((state) => ({ companies: [...state.companies, response] }));\r\n  },\r\n  getCompany: async (id: string) => {\r\n    const response = await API_COMPANY.get(id);\r\n    set({ company: response });\r\n  },\r\n  addMember: async (data: IMember) => {\r\n    const response = await API_COMPANY.addMember(data);\r\n    set((state) => ({\r\n      company: { ...state.company, members: [...state.company.members, data] },\r\n    }));\r\n    // set((state) => ({ company: {...state.company, members: [...state.company?.members, response]} }));\r\n  },\r\n  meeting: {\r\n    id: \"\",\r\n    name: \"\",\r\n    info: { name: \"\" },\r\n    // typeOfСause: '',\r\n    questions: [],\r\n    answers: [],\r\n  },\r\n  getMeeting: async (id: string) => {\r\n    const response = await API_MEETING.get(id);\r\n    set({\r\n      meeting: {\r\n        ...response,\r\n        info: {\r\n          ...response.info,\r\n          date_of_meeting:\r\n            response.info.date_of_meeting &&\r\n            moment(response.info.date_of_meeting, dateWithTimeGetFormat),\r\n          date_of_registration:\r\n            response.info.date_of_registration &&\r\n            moment(response.info.date_of_registration, dateWithTimeGetFormat),\r\n        },\r\n      },\r\n    });\r\n    // set({ meeting: response});\r\n  },\r\n  addMeeting: async (company_id: string, name: string) => {\r\n    const response = await API_MEETING.add(company_id, name);\r\n    set((state) => ({\r\n      company: {\r\n        ...state.company,\r\n        meetings: [...state.company.meetings, response],\r\n      },\r\n    }));\r\n  },\r\n  changeMeetingInfo: async (meetingInfo: any) => {\r\n    const response = await API_MEETING.changeInfo(meetingInfo);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        info: { ...state.meeting.info, meetingInfo },\r\n      },\r\n    }));\r\n  },\r\n  addQuesion: async (data: IQuestion) => {\r\n    const response = await API_QUESTIONS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        questions: [...state.meeting.questions, response],\r\n      },\r\n    }));\r\n  },\r\n  addAnswer: async (data: IAnswer[]) => {\r\n    const response = await API_ANSWERS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        answers: [...state.meeting.answers, ...response],\r\n      },\r\n    }));\r\n  },\r\n  catalogs: {},\r\n  getGatalog: async (type: string) => {\r\n    const response = await API_CATALOGS.get(type);\r\n    set((state) => ({\r\n      catalogs: {\r\n        ...state.catalogs,\r\n        [type]: response,\r\n      },\r\n    }));\r\n  },\r\n}));\r\n","export const dateWithTimeGetFormat = 'YYYY-MM-DDTHH:mm';\r\nexport const dateWithTimeShowFormat = 'DD.MM.YYYY HH:mm';","import axios from \"axios\";\r\nimport { utimes } from \"fs\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const DADATA_API = {\r\n  async getCompany(query: string) {\r\n    try {\r\n      const options = await axios.post(\r\n        \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\",\r\n        { query },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n            Authorization: \"Token f72f5381ea6760b06b1034d298d2c9bce5824346\",\r\n          },\r\n        }\r\n      );\r\n    //   const result = options.data.suggestions\r\n      const result = options.data.suggestions.map((item: any) => ({inn: item.data.inn, name: item.value}))\r\n      console.log(\"🚀 ~ file: dadata.ts ~ line 19 ~ getCompany ~ result\", result)\r\n      return result;\r\n    } catch (error) {}\r\n  },\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal, Select, Spin } from \"antd\";\r\nimport { DADATA_API } from \"features/dadata\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { ICompany } from \"./types\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(({ company }: { company: ICompany }) => {\r\n  const [options, setOptions] = useState<any[]>([]);\r\n\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n  const onSearch = async (value: string) => {\r\n    const newOptions = await DADATA_API.getCompany(value);\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newCompany = { ...form.getFieldsValue() };\r\n      modal.resolve(newCompany);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Создать компанию\"\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n      onOk={handleSubmit}\r\n    >\r\n      <Form form={form} layout=\"vertical\">\r\n        <Form.Item\r\n          name=\"inn\"\r\n          label=\"Название или ИНН компании\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            showSearch\r\n            filterOption={false}\r\n            onSearch={onSearch}\r\n            // notFoundContent={fetching ? <Spin size=\"small\" /> : null}\r\n          >\r\n            {options.map((option) => (\r\n              <Option value={option.inn}>\r\n                <span>{option.name} </span>\r\n                <span style={{ color: \"gray\", fontSize: \"10px\" }}>\r\n                  {option.inn}\r\n                </span>\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n});\r\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport { Button, Card, Table } from \"antd\";\r\nimport { ColumnsType } from \"antd/lib/table\";\r\nimport { useModal } from \"@ebay/nice-modal-react\";\r\n\r\nimport { ICompany } from \"entities/company/types\";\r\nimport { CompanyCard } from \"entities/company/ui\";\r\nimport CompanyForm from \"entities/company/form\";\r\nimport { useItems } from \"features/useItems\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useStore } from \"entities/store\";\r\n\r\ninterface DataType {\r\n  key: string;\r\n  name: string;\r\n  inn: number;\r\n  tags: string[];\r\n}\r\n\r\n// const columns: ColumnsType<DataType> = [\r\n//   {\r\n//     title: \"Название\",\r\n//     dataIndex: \"name\",\r\n//     key: \"name\",\r\n//   },\r\n//   {\r\n//     title: \"ИНН\",\r\n//     dataIndex: \"inn\",\r\n//     key: \"inn\",\r\n//   },\r\n//   // {\r\n//   //   title: 'Address',\r\n//   //   dataIndex: 'address',\r\n//   //   key: 'address',\r\n//   // }\r\n// ];\r\n\r\nconst CompaniesPage = () => {\r\n  // const userModal = useModal(CompanyForm);\r\n  // const [companies, setCompanies] = useState<ICompany[]>([]);\r\n\r\n  // const handleNewUser = useCallback(() => {\r\n  //   userModal.show().then((newCompany: any) => {\r\n  //     setCompanies([newCompany, ...companies]);\r\n  //   });\r\n  // }, [userModal, companies]);\r\n\r\n  // const handleEditUser = useCallback(\r\n  //   (company: ICompany) => {\r\n  //     userModal.show({company}).then((newCompany: any) => {\r\n  //       setCompanies((companies) => {\r\n  //         // Modify users immutablly\r\n  //         const i = companies.findIndex((u) => u.id === newCompany.id);\r\n  //         const updated = { ...companies[i], ...newCompany };\r\n  //         const arr = [...companies];\r\n  //         arr.splice(i, 1, updated);\r\n  //         return arr;\r\n  //       });\r\n  //     });\r\n  //   },\r\n  //   [userModal]\r\n  // );\r\n\r\n\r\n\r\n  const history = useNavigate();\r\n\r\n  const { companies, addCompany, getCompanies } = useStore(\r\n    (state) => state\r\n  );\r\n\r\n  const clickHandler = (id: string) => {\r\n    history(\"/companies/\" + id);\r\n  };\r\n\r\n  const userModal = useModal(CompanyForm);\r\n  // const addQuestion = useStore(state => state.addQuestion)\r\n  // const [items, setItems] = useState<any[]>([]);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newItem: any) => {\r\n      // setItems([newItem, ...items]);\r\n      // newItem.id = String(Date.now());\r\n      addCompany(newItem);\r\n    });\r\n  }, [userModal, companies]);\r\n\r\n  useEffect(() => {\r\n    getCompanies()\r\n  }, []);\r\n\r\n  // const { items, handleNewItem } = useItems<ICompany>(CompanyForm);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Компании</h1>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Новая компания\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {companies.map((company) => (\r\n          <Card\r\n          hoverable\r\n            key={company.id}\r\n            title={'ООО ' + company.name}\r\n            onClick={() => clickHandler(company.id)}\r\n          >\r\n            {company.inn}\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* <Table\r\n        size=\"small\"\r\n        rowKey=\"id\"\r\n        pagination={false}\r\n        columns={columns}\r\n        dataSource={companies}\r\n        style={{ marginTop: \"20px\" }}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompaniesPage;\r\n","import axios from \"axios\";\r\n\r\n// export const baseURL = \"http://localhost:5022/api\"\r\nexport const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["API_COMPANIES","api","response","data","API_COMPANY","id","API_MEETING","company_id","name","API_QUESTIONS","API_ANSWERS","API_CATALOGS","type","useStore","create","set","companies","company","requisites","inn","kpp","address","members","meetings","getCompanies","addCompany","newCompany","state","getCompany","addMember","meeting","info","questions","answers","getMeeting","date_of_meeting","moment","dateWithTimeGetFormat","date_of_registration","addMeeting","changeMeetingInfo","meetingInfo","addQuesion","addAnswer","catalogs","getGatalog","dateWithTimeShowFormat","DADATA_API","query","axios","headers","Accept","Authorization","options","result","suggestions","map","item","value","console","log","Option","Select","NiceModal","useState","setOptions","modal","useModal","Form","form","onSearch","newOptions","handleSubmit","useCallback","validateFields","then","getFieldsValue","resolve","hide","antdModal","title","okText","cancelText","onOk","layout","label","rules","required","message","showSearch","filterOption","option","style","color","fontSize","history","useNavigate","userModal","CompanyForm","handleNewItem","show","newItem","useEffect","onClick","className","hoverable","baseURL"],"sourceRoot":""}