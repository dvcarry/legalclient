{"version":3,"file":"static/js/18.e2a5ef09.chunk.js","mappings":"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","sources":["entities/meeting/types.ts","entities/member/types.ts","features/dadata.ts","pages/companyDetails/blocks/requisites/index.tsx","entities/member/MemberForm.tsx","pages/companyDetails/blocks/members/index.tsx","entities/meeting/form.tsx","pages/companyDetails/blocks/meetings/index.tsx","pages/companyDetails/index.tsx"],"sourcesContent":["import { IAnswer } from \"entities/answer/types\";\r\nimport { Moment } from \"moment\";\r\n\r\nexport interface IQuestion {\r\n  id: number;\r\n  index: number;\r\n  name: string;\r\n  solution: string;\r\n  description: string;\r\n  decision: string;\r\n}\r\n\r\nexport interface IMeeting {\r\n  id: string;\r\n  name: string;\r\n  info: {\r\n    name: string;\r\n    date_of_meeting?: Moment;\r\n    date_of_registration?: Moment;\r\n    date_of_start?: Moment;\r\n    date_of_finish?: Moment;\r\n    address_of_meeting?: string;\r\n    type?: MeetingTypeEnum;\r\n    type_of_cause?: MeetingTypeOfСauseEnum;\r\n    company_id?: string;\r\n  };\r\n  questions: IQuestion[];\r\n  // dateOfMeeting?: Date;\r\n  // addressOfMeeting?: string;\r\n  // type?: MeetingTypeEnum;\r\n  // typeOfСause?: MeetingTypeOfСauseEnum;\r\n  answers: IAnswer[];\r\n}\r\n\r\nexport enum MeetingTypeOfСauseEnum {\r\n  year = \"year\",\r\n  extra = \"extra\",\r\n}\r\n\r\nexport const MEETING_TYPES_OF_CAUSE: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeOfСauseEnum.year]: \"годовое\",\r\n  [MeetingTypeOfСauseEnum.extra]: \"внеочередное\",\r\n};\r\n\r\nexport enum MeetingTypeEnum {\r\n  ochno = \"ochno\",\r\n  zaochno = \"zaochno\",\r\n  ochnozaochno = \"ochnozaochno\",\r\n}\r\n\r\nexport const MEETING_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MeetingTypeEnum.ochno]: \"очное\",\r\n  [MeetingTypeEnum.zaochno]: \"заочное\",\r\n  [MeetingTypeEnum.ochnozaochno]: \"очная-заочное\",\r\n};\r\n\r\nexport interface IQuestionType {\r\n  id: number;\r\n  name: string;\r\n  law?: string;\r\n  description: string;\r\n}","export interface IMember {\r\n  id?: number;\r\n  firstname: string;\r\n  lastname: string;\r\n  sirname: string;\r\n  passport: string;\r\n  type: MemberTypeEnum[];\r\n  part?: number;\r\n  form: MemberFormEnum;\r\n  inn?: string;\r\n  company_name?: string;\r\n  ogrn?: string;\r\n  base?: string;\r\n}\r\n\r\nexport enum MemberFormEnum {\r\n  legal = \"legal\",\r\n  man = \"man\",\r\n}\r\n\r\nexport const MEMBERS_FORMS: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberFormEnum.legal]: \"Юридическое лицо\",\r\n  [MemberFormEnum.man]: \"Физическое лицо\",\r\n};\r\n\r\nexport enum MemberTypeEnum {\r\n  owner = \"owner\",\r\n  director = \"director\",\r\n  employee = \"employee\",\r\n}\r\n\r\nexport const MEMBER_TYPES = [\r\n  {\r\n    en: MemberTypeEnum.director,\r\n    ru: \"единоличный исполнительный орган\",\r\n  },\r\n  {\r\n    en: MemberTypeEnum.owner,\r\n    ru: \"участник\",\r\n  },\r\n];\r\n\r\nexport const MEMBERS_TYPES: {\r\n  [index: string]: string;\r\n} = {\r\n  [MemberTypeEnum.director]: \"директор\",\r\n  [MemberTypeEnum.owner]: \"собственник\",\r\n  [MemberTypeEnum.employee]: \"сотрудник\",\r\n};\r\n","import axios from \"axios\";\r\nimport { utimes } from \"fs\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const DADATA_API = {\r\n  async getCompany(query: string) {\r\n    try {\r\n      const options = await axios.post(\r\n        \"https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/party\",\r\n        { query },\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n            Authorization: \"Token f72f5381ea6760b06b1034d298d2c9bce5824346\",\r\n          },\r\n        }\r\n      );\r\n    //   const result = options.data.suggestions\r\n      const result = options.data.suggestions.map((item: any) => ({inn: item.data.inn, name: item.value}))\r\n      console.log(\"🚀 ~ file: dadata.ts ~ line 19 ~ getCompany ~ result\", result)\r\n      return result;\r\n    } catch (error) {}\r\n  },\r\n};\r\n","import { Button, Form, Input } from \"antd\";\r\nimport { ICompanyRequisites } from \"entities/company/types\";\r\nimport { FC, useState } from \"react\";\r\n\r\n\r\n\r\ninterface IPropc {\r\n  requisites: ICompanyRequisites;\r\n}\r\n\r\nexport const RequisitiesBlock: FC<IPropc> = ({ requisites }) => {\r\n  const [isActiveForm, setIsActiveForm] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  const activeHandler = () => {\r\n    setIsActiveForm(!isActiveForm);\r\n  };\r\n\r\n  if (!requisites.inn) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={form}\r\n        disabled={isActiveForm}\r\n        layout=\"vertical\"\r\n        initialValues={requisites}\r\n      >\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Название\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"inn\"\r\n          label=\"ИНН\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"kpp\"\r\n          label=\"КПП\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"ogrn\"\r\n          label=\"ОГРН\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"address\"\r\n          label=\"Юридический адрес\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n      </Form>\r\n      {isActiveForm ? (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Изменить\r\n        </Button>\r\n      ) : (\r\n        <Button type=\"primary\" onClick={activeHandler}>\r\n          Сохранить\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, InputNumber, Modal, Select } from \"antd\";\r\nimport { DADATA_API } from \"features/dadata\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { CompanySearch } from \"shared/companysearch\";\r\nimport {\r\n  IMember,\r\n  MEMBER_TYPES,\r\n  MemberTypeEnum,\r\n  MEMBERS_FORMS,\r\n  MemberFormEnum,\r\n} from \"./types\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default NiceModal.create(({ member }: { member: IMember }) => {\r\n  const [isOwner, setIsOwner] = useState(member.type.includes(MemberTypeEnum.owner));\r\n  const [memberForm, setMemberForm] = useState<MemberFormEnum>(member && member.form);\r\n  const [options, setOptions] = useState<any[]>([]);\r\n\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newMember = { ...form.getFieldsValue() };\r\n      modal.resolve(newMember);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n\r\n  const onSearch = async (value: string) => {\r\n    const newOptions = await DADATA_API.getCompany(value);\r\n    setOptions(newOptions);\r\n  };\r\n\r\n  const handleChangeMemberType = (values: any[]) => {\r\n    if (values.includes(MemberTypeEnum.owner)) {\r\n      setIsOwner(true);\r\n    } else {\r\n      setIsOwner(false);\r\n    }\r\n  };\r\n\r\n  const handleChangeFormType = (value: MemberFormEnum) => {\r\n    setMemberForm(value);\r\n  };\r\n\r\n  const manForm = (\r\n    <>\r\n      <Form.Item\r\n        name=\"firstname\"\r\n        label=\"Имя\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"lastname\"\r\n        label=\"Отчество\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"sirname\"\r\n        label=\"Фамилия\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"passport\"\r\n        label=\"Паспортные данные\"\r\n        rules={[\r\n          {\r\n            // required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"type\"\r\n        label=\"Статус лица\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          style={{ width: \"100%\" }}\r\n          // placeholder=\"Please select\"\r\n          // defaultValue={[\"a10\", \"c12\"]}\r\n          onChange={handleChangeMemberType}\r\n        >\r\n          {MEMBER_TYPES.map((member_type) => (\r\n            <Option key={member_type.en}>{member_type.ru}</Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n      {isOwner && (\r\n        <Form.Item\r\n          name=\"part\"\r\n          label=\"Доля в компании, %\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <InputNumber min={0} max={100} />\r\n        </Form.Item>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  const legalForm = (\r\n    <>\r\n      <Form.Item\r\n        name=\"inn\"\r\n        label=\"ИНН\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        {/* <Input /> */}\r\n        {/* <CompanySearch /> */}\r\n        <Select\r\n          showSearch\r\n          filterOption={false}\r\n          onSearch={onSearch}\r\n          // notFoundContent={fetching ? <Spin size=\"small\" /> : null}\r\n        >\r\n          {options.map((option) => (\r\n            <Option value={option.inn}>\r\n              <span>{option.name} </span>\r\n              <span style={{ color: \"gray\", fontSize: \"10px\" }}>\r\n                {option.inn}\r\n              </span>\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"firstname\"\r\n        label=\"Имя представителя\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"lastname\"\r\n        label=\"Отчество представителя\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"sirname\"\r\n        label=\"Фамилия представителя\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"base\"\r\n        label=\"Основание представления общества\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"passport\"\r\n        label=\"Паспортные данные представителя\"\r\n        rules={[\r\n          {\r\n            // required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n      {/* <Form.Item\r\n        name=\"type\"\r\n        label=\"Роль участника\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <Select\r\n          mode=\"multiple\"\r\n          allowClear\r\n          style={{ width: \"100%\" }}\r\n          // placeholder=\"Please select\"\r\n          // defaultValue={[\"a10\", \"c12\"]}\r\n          onChange={handleChangeMemberType}\r\n        >\r\n          {MEMBER_TYPES.map((member_type) => (\r\n            <Option key={member_type.en}>{member_type.ru}</Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item> */}\r\n\r\n      <Form.Item\r\n        name=\"part\"\r\n        label=\"Доля в компании, %\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: \"Please input the title of collection!\",\r\n          },\r\n        ]}\r\n      >\r\n        <InputNumber min={0} max={100} />\r\n      </Form.Item>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Лицо\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      onOk={handleSubmit}\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n    >\r\n      <Form form={form} initialValues={member} layout=\"vertical\">\r\n        <Form.Item\r\n          name=\"form\"\r\n          label=\"Физическое или юридическое лицо\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            onChange={handleChangeFormType}\r\n          >\r\n            {Object.keys(MEMBERS_FORMS).map((item: any, index: any) => (\r\n              <Option key={index} value={item}>\r\n                {MEMBERS_FORMS[item]}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        {!memberForm\r\n          ? null\r\n          : memberForm === MemberFormEnum.legal\r\n          ? legalForm\r\n          : manForm}\r\n\r\n        {/* <Form.Item\r\n          name=\"firstname\"\r\n          label=\"Имя\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"lastname\"\r\n          label=\"Отчество\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"sirname\"\r\n          label=\"Фамилия\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"passport\"\r\n          label=\"Паспортные данные\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"type\"\r\n          label=\"Роль участника\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Select\r\n            mode=\"multiple\"\r\n            allowClear\r\n            style={{ width: \"100%\" }}\r\n            // placeholder=\"Please select\"\r\n            // defaultValue={[\"a10\", \"c12\"]}\r\n            onChange={handleChangeMemberType}\r\n          >\r\n            {MEMBER_TYPES.map((member_type) => (\r\n              <Option key={member_type.en}>{member_type.ru}</Option>\r\n            ))}\r\n          </Select>\r\n        </Form.Item>\r\n        {isOwner && (\r\n          <Form.Item\r\n            name=\"part\"\r\n            label=\"Доля в компании, %\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please input the title of collection!\",\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber min={0} max={100} />\r\n          </Form.Item>\r\n        )} */}\r\n      </Form>\r\n    </Modal>\r\n  );\r\n});\r\n","import { useModal } from \"@ebay/nice-modal-react\";\r\nimport { Alert, Button, Card, Tag } from \"antd\";\r\nimport MemberForm from \"entities/member/MemberForm\";\r\nimport { IMember, MemberFormEnum, MEMBERS_TYPES } from \"entities/member/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport { FC, useCallback } from \"react\";\r\n\r\ninterface IProps {\r\n  members: IMember[];\r\n  company_id: string;\r\n}\r\n\r\nexport const MembersBlock: FC<IProps> = ({ members, company_id }) => {\r\n  console.log(\"🚀 ~ file: index.tsx ~ line 14 ~ members\", members)\r\n  const userModal = useModal(MemberForm);\r\n  const { addMember, changeMember } = useStore((state) => state);\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newMember: any) => {\r\n      addMember({ ...newMember, company_id });\r\n    });\r\n  }, [userModal, members]);\r\n\r\n  const handleChangeItem = useCallback(\r\n    (member: any) => {\r\n      userModal.show({ member }).then((newMember: any) => {\r\n        changeMember({...newMember, id: member.id});\r\n      });\r\n    },\r\n    [userModal, members]\r\n  );\r\n\r\n  const commonPart = members.reduce((acc, cur) => acc + +cur.part!, 0);\r\n\r\n  // if (commonPart !== 100) {\r\n  //   return (\r\n  //     <Alert\r\n  //       message=\"Общая доля участников не равна 100%. Проверьте доли участников компании.\"\r\n  //       type=\"warning\"\r\n  //       // closable\r\n  //       // onClose={onClose}\r\n  //     />\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить участника\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {commonPart !== 100 && (\r\n          <Alert\r\n            message=\"Общая доля участников не равна 100%. Проверьте доли участников компании.\"\r\n            type=\"warning\"\r\n            // closable\r\n            // onClose={onClose}\r\n          />\r\n        )}\r\n        {members.map((member) => {\r\n\r\n          const name = member.form === MemberFormEnum.legal ? 'ООО ' + member.company_name : `${member.sirname} ${member.firstname} ${member.lastname}`\r\n\r\n          return (\r\n            <Card\r\n              hoverable\r\n              // title={`${member.sirname} ${member.firstname} ${member.lastname}`}\r\n              title={name}\r\n              key={member.id}\r\n              onClick={() => handleChangeItem(member)}\r\n            >\r\n              <div>\r\n                {member.type &&\r\n                  member.type.map((item, index) => (\r\n                    <Tag key={index} color=\"green\">\r\n                      {MEMBERS_TYPES[item]}\r\n                    </Tag>\r\n                  ))}\r\n              </div>\r\n              <div>Паспорт: {member.passport}</div>\r\n              {member.part && <div>Доля в компании: {member.part}%</div>}\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import NiceModal, { useModal, antdModal } from \"@ebay/nice-modal-react\";\r\nimport { Form, Input, Modal } from \"antd\";\r\nimport { useCallback } from \"react\";\r\nimport { IMeeting } from \"./types\";\r\n\r\nexport default NiceModal.create((\r\n  {meeting}: {meeting: IMeeting}\r\n  ) => {\r\n  const modal = useModal();\r\n  const [form] = Form.useForm();\r\n\r\n  const handleSubmit = useCallback(() => {\r\n    form.validateFields().then(() => {\r\n      const newCompany = { ...form.getFieldsValue() };\r\n      modal.resolve(newCompany);\r\n      modal.hide();\r\n    });\r\n  }, [\r\n    modal,\r\n    // user,\r\n    form,\r\n  ]);\r\n  return (\r\n    <Modal\r\n      {...antdModal(modal)}\r\n      title=\"Создать собрание\"\r\n      //   okText={user ? \"Update\" : \"Create\"}\r\n      okText=\"Сохранить\"\r\n      cancelText=\"Отмена\"\r\n      onOk={handleSubmit}    \r\n    >\r\n      <Form form={form} layout='vertical'>\r\n        <Form.Item\r\n          name=\"name\"\r\n          label=\"Условное название собрания\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please input the title of collection!\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>        \r\n      </Form>\r\n    </Modal>\r\n  );\r\n});","import { useModal } from \"@ebay/nice-modal-react\";\r\nimport { Button, Card } from \"antd\";\r\nimport MeetingForm from \"entities/meeting/form\";\r\nimport { IMeeting, MEETING_TYPES, MEETING_TYPES_OF_CAUSE } from \"entities/meeting/types\";\r\nimport { useStore } from \"entities/store\";\r\nimport moment from \"moment\";\r\nimport { FC, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n  meetings: any[];\r\n  company_id: string;\r\n}\r\n\r\nexport const MeetingsBlock: FC<IProps> = ({ meetings, company_id }) => {\r\n  const userModal = useModal(MeetingForm);\r\n  const { addMeeting } = useStore((state) => state);\r\n\r\n  const history = useNavigate();\r\n\r\n  const handleNewItem = useCallback(() => {\r\n    userModal.show().then((newItem: any) => {\r\n      addMeeting(company_id, newItem.name!);\r\n    });\r\n  }, [userModal, meetings]);\r\n\r\n  const clickHandler = (id: string) => {\r\n    // setCurrentMeeting(id);\r\n    history(\"/meetings/\" + id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button type=\"primary\" onClick={handleNewItem}>\r\n        + Добавить собрание\r\n      </Button>\r\n      <div className=\"cards\">\r\n        {meetings.map((meeting) => {\r\n          return (\r\n            <Card\r\n              hoverable\r\n              key={meeting.id}\r\n              title={meeting.name}\r\n              onClick={() => clickHandler(meeting.id)}\r\n            >  \r\n              <div>{meeting.date_of_meeting}</div>          \r\n              <div>{MEETING_TYPES_OF_CAUSE[meeting.type_of_cause]}</div>\r\n              <div>{MEETING_TYPES[meeting.type]}</div>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useEffect } from \"react\";\r\nimport { Breadcrumb, PageHeader, Tabs } from \"antd\";\r\nimport { NavLink, useParams } from \"react-router-dom\";\r\n\r\nimport { RequisitiesBlock } from \"./blocks/requisites\";\r\nimport { useStore } from \"entities/store\";\r\nimport { MembersBlock } from \"./blocks/members\";\r\nimport { MeetingsBlock } from \"./blocks/meetings\";\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst CompaniesDetailsPage: FC = () => {\r\n  const { id } = useParams();\r\n\r\n  const { company, getCompany } = useStore((state) => state);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      getCompany(id);\r\n    }\r\n  }, [id]);\r\n\r\n  if (!company) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumb>\r\n        <Breadcrumb.Item>\r\n          <NavLink to=\"/companies\">Главная</NavLink>\r\n          {/* <a href=\"/\">Главная</a> */}\r\n        </Breadcrumb.Item>\r\n        <Breadcrumb.Item>\r\n          <NavLink to=\"/companies\">Компании</NavLink>\r\n          {/* <a href=\"/companies\">Компании</a> */}\r\n        </Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"header\">\r\n        <h1>{\"ООО \" + company.requisites.name}</h1>\r\n      </div>\r\n      <Tabs\r\n        defaultActiveKey=\"1\"\r\n        //   onChange={onChange}\r\n      >\r\n        <TabPane tab=\"Реквизиты\" key=\"1\">\r\n          <RequisitiesBlock requisites={company.requisites} />\r\n        </TabPane>\r\n        <TabPane tab=\"Лица\" key=\"2\">\r\n          <MembersBlock members={company.members} company_id={company.id} />\r\n        </TabPane>\r\n        <TabPane tab=\"Собрания\" key=\"3\">\r\n          <MeetingsBlock meetings={company.meetings} company_id={company.id} />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompaniesDetailsPage;\r\n"],"names":["MeetingTypeOfСauseEnum","MeetingTypeEnum","MEETING_TYPES_OF_CAUSE","year","extra","MEETING_TYPES","ochno","zaochno","ochnozaochno","MemberFormEnum","MemberTypeEnum","MEMBERS_FORMS","legal","man","MEMBER_TYPES","en","director","ru","owner","MEMBERS_TYPES","employee","DADATA_API","getCompany","query","axios","headers","Accept","Authorization","options","result","data","suggestions","map","item","inn","name","value","console","log","RequisitiesBlock","requisites","useState","isActiveForm","setIsActiveForm","Form","form","activeHandler","disabled","layout","initialValues","label","rules","required","message","type","onClick","Option","Select","NiceModal","member","includes","isOwner","setIsOwner","memberForm","setMemberForm","setOptions","modal","useModal","handleSubmit","useCallback","validateFields","then","newMember","getFieldsValue","resolve","hide","onSearch","newOptions","manForm","mode","allowClear","style","width","onChange","values","member_type","min","max","legalForm","showSearch","filterOption","option","color","fontSize","antdModal","title","onOk","okText","cancelText","Object","keys","index","MembersBlock","members","company_id","userModal","MemberForm","useStore","state","addMember","changeMember","handleNewItem","show","handleChangeItem","id","commonPart","reduce","acc","cur","part","className","company_name","sirname","firstname","lastname","hoverable","passport","meeting","newCompany","MeetingsBlock","meetings","MeetingForm","addMeeting","history","useNavigate","newItem","date_of_meeting","type_of_cause","TabPane","Tabs","useParams","company","useEffect","to","defaultActiveKey","tab"],"sourceRoot":""}