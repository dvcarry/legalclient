{"version":3,"file":"static/js/256.f0434399.chunk.js","mappings":"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","sources":["pages/companies/api-companies.ts","pages/companyDetails/api-company.ts","pages/meetingDetails/api-meeting.ts","pages/meetingDetails/blocks/questionsBlock/api-questions.ts","pages/meetingDetails/blocks/answersBlock/api-answers.ts","shared/api/api-catalogs.ts","pages/login/api-auth.ts","entities/store/index.ts","features/dates.ts","shared/config/api.ts"],"sourcesContent":["import { ICompany } from \"entities/company/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANIES = {\r\n  async getAll(user_id: string) {\r\n    const { data: response } = await api.get<ICompany[]>(\r\n      \"/companies/all/\" + user_id\r\n    );\r\n    return response;\r\n  },\r\n  async add(data: ICompany, user_id: string) {\r\n    const { data: response } = await api.post<ICompany>(\"/companies\", {\r\n      ...data,\r\n      user_id,\r\n    });\r\n    return response;\r\n  },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_COMPANY = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<ICompanyFull>(\"/companies/\" + id);\r\n    return response;\r\n  },\r\n  async addMember(data: IMember) {\r\n    const { data: response } = await api.post<IMember>(\"/members/\", data);\r\n    return response;\r\n  },\r\n  async changeMember(data: IMember) {\r\n    const { data: response } = await api.put(\"/members/\", data);\r\n    return response;\r\n  },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_MEETING = {\r\n  async get(id: string) {\r\n    const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n    return response;\r\n  },\r\n  async add(company_id: string, name: string) {\r\n    const { data: response } = await api.post<IMeeting>(\"/meetings/\", {\r\n      company_id,\r\n      name,\r\n    });\r\n    return response;\r\n  },\r\n  async changeInfo(data: IMeeting) {\r\n    const { data: response } = await api.put<any>(\"/meetings/\", data);\r\n    return response;\r\n  },\r\n  async changeFactInfo(data: any) {\r\n    const { data: response } = await api.put<any>(\"/meetings/fact\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};\r\n","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_QUESTIONS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IQuestion) {\r\n    const { data: response } = await api.post<IQuestion>(\"/questions/\", data);\r\n    return response;\r\n  },\r\n  async getQuestionTypes() {\r\n    const { data: response } = await api.get<any>(\"/catalogs/question_type\");\r\n    return response;\r\n  },\r\n  async change(data: IQuestion) {\r\n    const { data: response } = await api.put<any>(\"/questions/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_ANSWERS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n  async add(data: IAnswer[]) {\r\n    const { data: response } = await api.post<any>(\"/answers/\", data);\r\n    return response;\r\n  },\r\n  async change(data: IAnswer[]) {\r\n    const { data: response } = await api.put<any>(\"/answers/\", data);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_CATALOGS = {\r\n//   async get(id: string) {\r\n//     const { data: response } = await api.get<IMeeting>(\"/meetings/\" + id);\r\n//     return response;\r\n//   },\r\n\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/catalogs/\" + type);\r\n    return response;\r\n  },\r\n  //   async addMember(data: IMember) {\r\n  //     const { data: response } = await api.post<ICompany>(\"/members/\", data);\r\n  //     return response;\r\n  //   },\r\n};","import { api } from \"shared/config/api\";\r\n\r\nexport const API_AUTH = {\r\n  async login(id: string) {\r\n    const { data: response } = await api.post<{ success: boolean; id: string }>(\r\n      \"/auth/login\",\r\n      { id }\r\n    );\r\n    return response;\r\n  },\r\n};\r\n","import { getStringDate } from \"./../../features/dates\";\r\nimport create from \"zustand\";\r\nimport moment from \"moment\";\r\n\r\nimport { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { IMeeting, IQuestion } from \"entities/meeting/types\";\r\nimport { API_COMPANIES } from \"pages/companies/api-companies\";\r\nimport { API_COMPANY } from \"pages/companyDetails/api-company\";\r\nimport { API_MEETING } from \"pages/meetingDetails/api-meeting\";\r\nimport { API_QUESTIONS } from \"pages/meetingDetails/blocks/questionsBlock/api-questions\";\r\nimport { IAnswer } from \"entities/answer/types\";\r\nimport { API_ANSWERS } from \"pages/meetingDetails/blocks/answersBlock/api-answers\";\r\nimport { dateWithTimeFormat } from \"features/dates\";\r\nimport { API_CATALOGS } from \"shared/api/api-catalogs\";\r\nimport { API_AUTH } from \"pages/login/api-auth\";\r\n\r\ninterface CompanyState {\r\n  login: (user_id: string) => void;\r\n  user_id: string;\r\n  companies: ICompany[];\r\n  getCompanies: (user_id: string) => void;\r\n  addCompany: (newCompany: ICompany, user_id: string) => void;\r\n  company: ICompanyFull;\r\n  getCompany: (id: string) => void;\r\n  addMember: (data: IMember) => void;\r\n  changeMember: (data: IMember) => void;\r\n  meeting: IMeeting;\r\n  getMeeting: (id: string) => void;\r\n  addMeeting: (company_id: string, name: string) => void;\r\n  changeMeetingInfo: (meetingInfo: any) => void;\r\n  changeMeetingFactInfo: (meetingInfo: any) => void;\r\n  addQuestion: (data: IQuestion) => void;\r\n  changeQuestion: (data: IQuestion) => void;\r\n  addAnswer: (data: IAnswer[]) => void;\r\n  changeAnswer: (data: IAnswer[]) => void;\r\n  catalogs: any;\r\n  getGatalog: (type: string) => void;\r\n}\r\n\r\nexport const useStore = create<CompanyState>()((set) => ({\r\n  login: async (user_id) => {\r\n    const response = await API_AUTH.login(user_id);\r\n    console.log(\"🚀 ~ file: index.ts ~ line 44 ~ login: ~ response\", response)\r\n    if (response.success) {\r\n      console.log('set')\r\n      set({ user_id });\r\n    }\r\n  },\r\n  user_id: '',\r\n  companies: [],\r\n  company: {\r\n    id: \"\",\r\n    requisites: { name: \"\", inn: \"\", kpp: \"\", address: \"\" },\r\n    members: [],\r\n    meetings: [],\r\n  },\r\n  getCompanies: async (user_id) => {\r\n    const response = await API_COMPANIES.getAll(user_id);\r\n    set({ companies: response });\r\n  },\r\n  addCompany: async (newCompany, user_id) => {\r\n    const response = await API_COMPANIES.add(newCompany, user_id);\r\n    set((state) => ({ companies: [...state.companies, response] }));\r\n  },\r\n  getCompany: async (id: string) => {\r\n    const response = await API_COMPANY.get(id);\r\n    set({ company: response });\r\n  },\r\n  addMember: async (data: IMember) => {\r\n    const response = await API_COMPANY.addMember(data);\r\n    set((state) => ({\r\n      company: { ...state.company, members: [...state.company.members, response] },\r\n      // company: { ...state.company, members: [...state.company.members, data] },\r\n    }));\r\n    // set((state) => ({ company: {...state.company, members: [...state.company?.members, response]} }));\r\n  },\r\n  changeMember: async (data: IMember) => {\r\n    const response = await API_COMPANY.changeMember(data);\r\n    set((state) => ({\r\n      company: {\r\n        ...state.company,\r\n        members: state.company.members.map((member) =>\r\n          member.id === data.id ? { ...member, ...data } : member\r\n        ),\r\n      },\r\n    }));\r\n  },\r\n  meeting: {\r\n    id: \"\",\r\n    name: \"\",\r\n    info: { name: \"\" },\r\n    // typeOfСause: '',\r\n    questions: [],\r\n    answers: [],\r\n  },\r\n  getMeeting: async (id: string) => {\r\n    const response = await API_MEETING.get(id);\r\n    console.log(\r\n      \"🚀 ~ file: index.ts ~ line 72 ~ getMeeting: ~ response\",\r\n      response\r\n    );\r\n    set({\r\n      meeting: {\r\n        ...response,\r\n        info: {\r\n          ...response.info,\r\n          date_of_meeting:\r\n            response.info.date_of_meeting &&\r\n            moment(response.info.date_of_meeting, dateWithTimeFormat),\r\n          date_of_registration:\r\n            response.info.date_of_registration &&\r\n            moment(response.info.date_of_registration, dateWithTimeFormat),\r\n          date_of_start:\r\n            response.info.date_of_start &&\r\n            moment(response.info.date_of_start, dateWithTimeFormat),\r\n          date_of_finish:\r\n            response.info.date_of_finish &&\r\n            moment(response.info.date_of_finish, dateWithTimeFormat),\r\n        },\r\n      },\r\n    });\r\n    // set({ meeting: response});\r\n  },\r\n  addMeeting: async (company_id: string, name: string) => {\r\n    const response = await API_MEETING.add(company_id, name);\r\n    set((state) => ({\r\n      company: {\r\n        ...state.company,\r\n        meetings: [...state.company.meetings, response],\r\n      },\r\n    }));\r\n  },\r\n  changeMeetingInfo: async (meetingInfo: any) => {\r\n    const meetingInfoWithStringDates = {\r\n      ...meetingInfo,\r\n      date_of_meeting: getStringDate(meetingInfo.date_of_meeting),\r\n      date_of_registration: getStringDate(meetingInfo.date_of_registration),\r\n      date_of_start: getStringDate(meetingInfo.date_of_meeting),\r\n      date_of_finish: getStringDate(meetingInfo.date_of_meeting),\r\n    };\r\n    console.log(\r\n      \"🚀 ~ file: index.ts ~ line 96 ~ changeMeetingInfo: ~ meetingInfo\",\r\n      meetingInfoWithStringDates\r\n    );\r\n    const response = await API_MEETING.changeInfo(meetingInfoWithStringDates);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        info: { ...state.meeting.info, ...meetingInfo, date_of_start: meetingInfo.date_of_meeting, date_of_finish: meetingInfo.date_of_meeting},\r\n      },\r\n    }));\r\n  },\r\n  changeMeetingFactInfo: async (meetingInfo: any) => {\r\n    const meetingInfoWithStringDates = {\r\n      ...meetingInfo,\r\n      date_of_start: getStringDate(meetingInfo.date_of_start),\r\n      date_of_finish: getStringDate(meetingInfo.date_of_finish),\r\n    };\r\n    console.log(\r\n      \"🚀 ~ file: index.ts ~ line 96 ~ changeMeetingInfo: ~ meetingInfo\",\r\n      meetingInfoWithStringDates\r\n    );\r\n    const response = await API_MEETING.changeFactInfo(\r\n      meetingInfoWithStringDates\r\n    );\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        info: { ...state.meeting.info, meetingInfo },\r\n      },\r\n    }));\r\n  },\r\n  addQuestion: async (data: IQuestion) => {\r\n    const response = await API_QUESTIONS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        questions: [...state.meeting.questions, response],\r\n      },\r\n    }));\r\n  },\r\n  changeQuestion: async (data: IQuestion) => {\r\n    const response = await API_QUESTIONS.change(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        questions: state.meeting.questions.map((question) =>\r\n        question.id === data.id ? { ...question, ...data } : question\r\n        ),\r\n      },\r\n    }));\r\n  },\r\n  addAnswer: async (data: IAnswer[]) => {\r\n    const response = await API_ANSWERS.add(data);\r\n    set((state) => ({\r\n      meeting: {\r\n        ...state.meeting,\r\n        answers: [...state.meeting.answers, ...response],\r\n      },\r\n    }));\r\n  },\r\n  changeAnswer: async (data: IAnswer[]) => {\r\n    console.log(\"🚀 ~ file: index.ts ~ line 189 ~ changeAnswer: ~ data\", data)\r\n    const response = await API_ANSWERS.change(data);\r\n    // set((state) => {\r\n    //   // const newAnswers = state.meeting.answers.map(answer => answer.question_id === )\r\n    //   console.log(state.meeting.answers)\r\n    //   return {\r\n\r\n    //   }\r\n    // })\r\n    // set((state) => ({\r\n    //   meeting: {\r\n    //     ...state.meeting,\r\n    //     answers: [...state.meeting.answers, ...response],\r\n    //   },\r\n    // }));\r\n  },\r\n  catalogs: {},\r\n  getGatalog: async (type: string) => {\r\n    const response = await API_CATALOGS.get(type);\r\n    set((state) => ({\r\n      catalogs: {\r\n        ...state.catalogs,\r\n        [type]: response,\r\n      },\r\n    }));\r\n  },\r\n}));\r\n","import moment from \"moment\";\r\n\r\n// export const dateWithTimeGetFormat = 'YYYY-MM-DDTHH:mm';\r\nexport const dateWithTimeFormat = 'DD.MM.YYYY HH:mm';\r\n\r\nexport const getStringDate = (date: any) => moment(date).format(dateWithTimeFormat)","import axios from \"axios\";\r\n\r\n// export const baseURL = \"http://localhost:5022/api\"\r\nexport const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["API_COMPANIES","user_id","api","response","data","API_COMPANY","id","API_MEETING","company_id","name","API_QUESTIONS","API_ANSWERS","API_CATALOGS","type","API_AUTH","useStore","create","set","login","console","log","success","companies","company","requisites","inn","kpp","address","members","meetings","getCompanies","addCompany","newCompany","state","getCompany","addMember","changeMember","map","member","meeting","info","questions","answers","getMeeting","date_of_meeting","moment","dateWithTimeFormat","date_of_registration","date_of_start","date_of_finish","addMeeting","changeMeetingInfo","meetingInfo","meetingInfoWithStringDates","getStringDate","changeMeetingFactInfo","addQuestion","changeQuestion","question","addAnswer","changeAnswer","catalogs","getGatalog","date","format","baseURL","axios","headers"],"sourceRoot":""}