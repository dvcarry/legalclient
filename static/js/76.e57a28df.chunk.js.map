{"version":3,"file":"static/js/76.e57a28df.chunk.js","mappings":"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","sources":["entities/template/types.ts","pages/documentEditing/api-templates.ts","pages/documentEditing/index.tsx","shared/config/api.ts"],"sourcesContent":["export enum TemplateItemTypeEnum {\r\n    paragraph = 'paragraph',\r\n    array = 'array',\r\n}\r\n\r\nexport enum TemplateTextTypeEnum {\r\n    text = 'text',\r\n    variable = 'variable',\r\n}\r\n\r\nexport interface ITemplateItemText {\r\n    type: TemplateTextTypeEnum\r\n    value: string,\r\n    styles: any;\r\n    id?: string;\r\n}\r\n\r\nexport interface ITemplateItem {\r\n    type: TemplateItemTypeEnum\r\n    value: ITemplateItemText[],\r\n    styles: any;\r\n}","import { ICompany, ICompanyFull } from \"entities/company/types\";\r\nimport { IMember } from \"entities/member/types\";\r\nimport { api } from \"shared/config/api\";\r\n\r\nexport const API_TEMPLATES = {\r\n  async get(type: string) {\r\n    const { data: response } = await api.get<any>(\"/templates/\" + type);\r\n    return response;\r\n  },\r\n  async change(document_type: string, template: any) {\r\n    const { data: response } = await api.post<any>(\"/templates/\", {\r\n      document_type,\r\n      template,\r\n    });\r\n    return response;\r\n  },\r\n};\r\n","import { FocusEventHandler, useEffect, useState } from \"react\";\r\nimport { ITemplateItem, TemplateItemTypeEnum } from \"entities/template/types\";\r\nimport { API_TEMPLATES } from \"./api-templates\";\r\nimport \"./index.scss\";\r\nimport { Button } from \"antd\";\r\n\r\nconst createCSSFromStyles = (styles: any) => {\r\n  console.log(\"üöÄ ~ file: index.tsx ~ line 8 ~ createCSSFromStyles ~ styles\", styles)\r\n  let result = {};\r\n  styles &&\r\n    Object.keys(styles).length > 0 &&\r\n    Object.keys(styles).forEach((item) => {\r\n      if (item === \"alignment\") {\r\n        result = {\r\n          ...result,\r\n          textAlign: styles.alignment,\r\n        };\r\n      }\r\n      if (item === \"bold\") {\r\n        result = {\r\n          ...result,\r\n          fontWeight: 700,\r\n        };\r\n      }\r\n      if (item === \"break\") {\r\n\r\n        result = {\r\n          ...result,\r\n          display: 'block',\r\n        };\r\n        console.log(result)\r\n      }\r\n    });\r\n  \r\n  return result;\r\n};\r\n\r\nconst DocumentEditingPage = () => {\r\n  const [template, setTemplate] = useState<ITemplateItem[]>([]);\r\n  const [currentBlock, setCurrentBlock] = useState(\"\");\r\n\r\n  const getTemplate = async () => {\r\n    const newTemplate = await API_TEMPLATES.get(\"notification\");\r\n    setTemplate(newTemplate);\r\n  };\r\n\r\n  const clickHandler = (e: any) => {\r\n    setCurrentBlock(e.target.id);\r\n  };\r\n\r\n  const changeSomeInTemplate = (\r\n    id: string,\r\n    type: \"value\" | \"styles\",\r\n    value: any\r\n  ) => {\r\n    const newTemplate = template.map((item) => {\r\n      if (item.value.some((itemValue) => itemValue.id === id)) {\r\n        return {\r\n          ...item,\r\n          value: item.value.map((itemValue) =>\r\n            itemValue.id === id ? { ...itemValue, [type]: value } : itemValue\r\n          ),\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    console.log(\"üöÄ ~ file: index.tsx ~ line 58 ~ newTemplate ~ newTemplate\", newTemplate)\r\n    setTemplate(newTemplate);\r\n  };\r\n\r\n  const utils = {\r\n    addEnter() {\r\n      changeSomeInTemplate(currentBlock, \"styles\", {\r\n        break: 1,\r\n      });\r\n    },\r\n    makeBold() {\r\n      changeSomeInTemplate(currentBlock, \"styles\", {\r\n        bold: true,\r\n      });\r\n    },\r\n  };\r\n\r\n  const changeHandler = (e: any) => {\r\n    const newTemplate = template.map((item) => {\r\n      if (item.value.some((itemValue) => itemValue.id === e.target.id)) {\r\n        const objectOfChanges =\r\n          e.nativeEvent.inputType === \"insertParagraph\"\r\n            ? { styles: { break: 1 } }\r\n            : { value: e.target.innerText };\r\n\r\n        return {\r\n          ...item,\r\n          value: item.value.map((itemValue) =>\r\n            itemValue.id === e.target.id\r\n              ? { ...itemValue, value: e.target.innerText }\r\n              : itemValue\r\n          ),\r\n        };\r\n      } else {\r\n        return item;\r\n      }\r\n    });\r\n    setTemplate(newTemplate);\r\n  };\r\n\r\n  const saveHandler = () => {\r\n    API_TEMPLATES.change(\"notification\", JSON.stringify(template));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTemplate();\r\n  }, []);\r\n\r\n  if (template.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"template_list\">\r\n      {template.map((item, index) => {\r\n        if (item.type === TemplateItemTypeEnum.paragraph) {\r\n          const { styles } = item;\r\n\r\n          const cssStyles = createCSSFromStyles(styles);\r\n\r\n          return (\r\n            <div style={cssStyles} key={index}>\r\n              {item.value.map((itemValue) => {\r\n                const textCssStyles = createCSSFromStyles(itemValue.styles);\r\n                return (\r\n                  <span\r\n                    id={itemValue.id}\r\n                    key={itemValue.id}\r\n                    className={itemValue.type}\r\n                    style={textCssStyles}\r\n                    contentEditable\r\n                    // onInput={changeHandler}\r\n                    onBlur={changeHandler}\r\n                    onClick={clickHandler}\r\n                    suppressContentEditableWarning={true}\r\n                  >\r\n                    {itemValue.value}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n      <Button onClick={saveHandler}>dddd</Button>\r\n      <span onClick={utils.addEnter}>–î–æ–±–∞–≤–∏—Ç—å –∞–±–∑–∞—Ü —Å–≤–µ—Ä—Ö—É</span>\r\n      <span onClick={utils.makeBold}>–°–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DocumentEditingPage;\r\n","import axios from \"axios\";\r\n\r\nexport const baseURL = \"http://localhost:5022/api\"\r\n// export const baseURL = \"http://82.146.40.11:5022/api\"\r\n\r\nexport const api = axios.create({\r\n  baseURL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});"],"names":["TemplateItemTypeEnum","TemplateTextTypeEnum","API_TEMPLATES","type","api","response","data","document_type","template","createCSSFromStyles","styles","console","log","result","Object","keys","length","forEach","item","textAlign","alignment","fontWeight","display","useState","setTemplate","currentBlock","setCurrentBlock","getTemplate","newTemplate","clickHandler","e","target","id","changeSomeInTemplate","value","map","some","itemValue","utils","addEnter","break","makeBold","bold","changeHandler","nativeEvent","inputType","innerText","useEffect","className","index","paragraph","cssStyles","style","textCssStyles","contentEditable","onBlur","onClick","suppressContentEditableWarning","JSON","stringify","baseURL","axios","headers"],"sourceRoot":""}